-- -------------------------------------------------------------
--            Star Language (atualizada)
-- -------------------------------------------------------------

-- We import the definitions from the first-order language L:
import LeanProjeto2.FOL
import MathLib.Tactic

open FOL
open LFormula

namespace StarLang

-- Finite types [def 1.1]
inductive FType : Type
| ground : FType                        -- G
| arrow : FType ‚Üí FType ‚Üí FType         -- œÉ ‚Üí œÑ
| star : FType ‚Üí FType                  -- œÉ*
deriving Repr, DecidableEq

open FType

-- Notation for finite types
def G := ground                         -- notation G => ground
notation t "‚ü∂" t1 => arrow t t1
notation t "‚ãÜ" => star t

def s1ex2_1 : FType := G‚ãÜ
def s1ex2_2 : FType := G ‚ü∂ G
def s1ex2_3 : FType := G ‚ü∂ (G ‚ü∂ G)
def s1ex2_3' : FType := (G ‚ü∂ G) ‚ü∂ G
def s1ex2_4 : FType := (G ‚ü∂ G) ‚ü∂ (G ‚ü∂ (G ‚ü∂ G))
def s1ex2_5 (œÉ œÑ : FType) : FType := œÉ ‚ü∂ ((œÉ‚ãÜ ‚ü∂ œÑ) ‚ü∂ œÑ)
def s1ex2_5' (œÉ œÑ : FType) : FType := (œÉ‚ãÜ ‚ü∂ œÑ)‚ãÜ
example (œÉ œÑ : FType) : FType := (œÉ‚ãÜ ‚ü∂ œÑ)‚ãÜ

-- ----------------------------
-- TERMS and CONSTANTS (p.9-12)
-- ----------------------------

-- def Sym : Type := String deriving BEq, DecidableEq, Repr

-- DEFINITION 1.2 (p.8-9): Terms of L^{omega}_*
inductive Term --where
| lcons : LTerm ‚Üí Term                  -- L-constants
| pi --{œÉ œÑ: FType} : Term                                    -- combinators:     Œ†
| sigma --{œÉ œÑ œÅ: FType} : Term                                --                  Œ£
| sing                                  -- star constants:  ùî∞
| bUnion                                --                  ‚à™ (binary union)
| iUnion                                --                  ‚à™ (indexed union)
| var : String ‚Üí Term                   -- variables
| app : Term ‚Üí Term ‚Üí Term              -- application of terms
deriving Repr, DecidableEq

open Term

-- Helper function to check if an LTerm is well-formed
inductive LTerm_is_wellformed_inStar : List String ‚Üí LTerm ‚Üí Prop
| wf_var {xs x} : x ‚àà xs ‚Üí LTerm_is_wellformed_inStar xs (LTerm.Lvar x)
| wf_const {xs c} : LTerm_is_wellformed_inStar xs (LTerm.Lconst c)
| wf_func {xs f ts} : (‚àÄ t ‚àà ts, LTerm_is_wellformed_inStar xs t) ‚Üí LTerm_is_wellformed_inStar xs (LTerm.Lfunc f ts)

-- Define Term_is_wellformed for Term
inductive Term_is_wellformed : List String ‚Üí Term ‚Üí Prop
| wf_lcons {xs} {t : LTerm} : LTerm_is_wellformed_inStar xs t ‚Üí Term_is_wellformed xs (lcons t)           -- TODO not now: n√£o sei porque com LTerm.LTerm_is_wellformed n√£o funciona tbm
| wf_pi {xs} : Term_is_wellformed xs pi
| wf_sigma {xs} : Term_is_wellformed xs sigma
| wf_sing {xs} : Term_is_wellformed xs sing
| wf_bUnion {xs} : Term_is_wellformed xs bUnion
| wf_iUnion {xs} : Term_is_wellformed xs iUnion
| wf_var {xs x} : x ‚àà xs ‚Üí Term_is_wellformed xs (var x)
| wf_app {xs t1 t2} : Term_is_wellformed xs t1 ‚Üí Term_is_wellformed xs t2 ‚Üí Term_is_wellformed xs (app t1 t2)

-- Example usage
def ex_term1 := Term.var "x"
def ex_term2 := Term.lcons (LTerm.Lvar "y")
def ex_term3 := Term.app ex_term1 ex_term2

example : Term_is_wellformed ["x", "y"] ex_term1 := Term_is_wellformed.wf_var (List.mem_cons_self "x" ["y"])
--example : Term_is_wellformed ["x", "y"] ex_term2 := Term_is_wellformed.wf_lcons (LTerm_is_wellformed_inStar.wf_var (List.mem_cons_self "y" ["x"]))
--example : Term_is_wellformed ["x", "y"] ex_term3 := Term_is_wellformed.wf_app (Term_is_wellformed.wf_var (List.mem_cons_self "x" ["y"])) (Term_is_wellformed.wf_lcons (LTerm_is_wellformed_inStar.wf_var (List.mem_cons_self "y" ["x"])))

/-
inductive LTerm : Type
| Lvar : String ‚Üí LTerm
| Lconst : String ‚Üí LTerm
| Lfunc : String ‚Üí List LTerm ‚Üí LTerm
deriving BEq, Repr

-- Definition: well-formed terms
inductive Term_is_wellformed : List String ‚Üí LTerm ‚Üí Prop
| bc_var :
    (x ‚àà xs) ‚Üí Term_is_wellformed xs (Lvar x)                                   -- A variable Lvar x is well-formed if x is in the list
| bc_const :
    Term_is_wellformed xs (Lconst c)                                            -- A constant is always well-formed
| bc_func :
    (‚àÄ t ‚àà ts, Term_is_wellformed xs t) ‚Üí Term_is_wellformed xs (Lfunc f ts)    -- If t‚ÇÅ,...,t‚Çô are well-formed, then so is f(t‚ÇÅ,...,t‚Çô)

inductive

-/

namespace Term

-- DEFINITION: subterm _ of a term _
inductive isSubterm : Term ‚Üí Term ‚Üí Prop
| refl (t : Term) : isSubterm t t                                                             -- Terms are always subterms of themselves
| app_left {t‚ÇÅ t‚ÇÇ t' : Term} : isSubterm t' t‚ÇÅ ‚Üí isSubterm t' (Term.app t‚ÇÅ t‚ÇÇ)                  -- Subterms of applications (LHS)
| app_right {t‚ÇÅ t‚ÇÇ t' : Term} : isSubterm t' t‚ÇÇ ‚Üí isSubterm t' (Term.app t‚ÇÅ t‚ÇÇ)                 -- Subterms of applications (RHS)

open isSubterm

-- Example: example of a subterm
example : isSubterm (var "x") (app (var "x") (var "y")) :=
  by
    have H := isSubterm.refl (var "x")
    exact app_left H

/-
-- Examples of subterms
example : isSubterm (var "x") ((var "x")¬∑(var "y")) :=
  app_left refl

example : isSubterm (Term.var "y") (Term.app (Term.var "x") (Term.var "y")) :=
  app_right refl
-/


-- -------------------------------------
-- FREE VARIABLES PARA TERMOS EM L^œâ_*
-- -------------------------------------

-- DEFINITION: all the (free) variables of terms in StarLang
def freevars : Term ‚Üí Finset String                           -- TODO: mudar este nome para term_vars?
| lcons t => t.Lfreevars                                      --       since para terms: vars and free_vars it's the same
| pi
| sigma
| sing
| bUnion
| iUnion => {}
| var x => {x}
| app t‚ÇÅ t‚ÇÇ => t‚ÇÅ.freevars ‚à™ t‚ÇÇ.freevars

def isClosedTerm (t : Term) : Prop := freevars t = {}

end Term

-- ------------------------------------------------------------
-- NOTATION FOR THE COMBINATORS AND THE STAR CONSTANTS IN L^œâ_* (and the application of terms)
-- ------------------------------------------------------------

-- NOTATION: Notation for combinators and star constants
notation "Œ†‚ÇÅ" => Term.pi
notation "Œ£‚ÇÅ" => Term.sigma
notation "ùî∞‚ÇÅ" => Term.sing
notation "‚à™‚ÇÅ" => Term.bUnion
notation "ind_‚ãÉ‚ÇÅ" => Term.iUnion
notation t‚ÇÅ "¬∑" t‚ÇÇ => Term.app t‚ÇÅ t‚ÇÇ

open Term

-- ------------------------------------------------------
-- TYPECHECKING THE TERMS OF L^{omega}_*
-- We typecheck the components of the formulas of L^œâ_*.
-- This guarantees that the formulas have admissible types.
-- ------------------------------------------------------

inductive Term_TypeChecking : Term ‚Üí FType ‚Üí Prop
| tcLcons (t : LTerm) : Term_TypeChecking (lcons t) G                                                           -- L-constants have type G
| tcPi {œÉ œÑ} : Term_TypeChecking pi (œÉ ‚ü∂ (œÑ ‚ü∂ œÉ))                                                             -- Œ†_{œÉ,œÑ} : œÉ ‚ü∂ (œÑ ‚ü∂ œÉ)
| tcSigma {œÉ œÑ œÅ}: Term_TypeChecking sigma ((œÉ ‚ü∂ (œÑ ‚ü∂ œÅ)) ‚ü∂ ((œÉ ‚ü∂ œÑ) ‚ü∂ (œÉ ‚ü∂ œÅ)))                           -- Œ£_{œÉ,œÑ,œÅ} : (œÉ ‚ü∂ (œÑ ‚ü∂ œÅ)) ‚ü∂ ((œÉ ‚ü∂ œÑ) ‚ü∂ (œÉ ‚ü∂ œÅ))
| tcSing {œÉ}: Term_TypeChecking sing (œÉ ‚ü∂ œÉ‚ãÜ)                                                                  -- ùî∞_{œÉ} : œÉ‚ãÜ
| tcBUnion {œÉ}: Term_TypeChecking bUnion (œÉ‚ãÜ ‚ü∂ (œÉ‚ãÜ ‚ü∂ œÉ‚ãÜ))                                                      -- ‚à™_{œÉ} : œÉ‚ãÜ ‚ü∂ (œÉ‚ãÜ ‚ü∂ œÉ‚ãÜ)
| tcIUnion {œÉ œÑ} : Term_TypeChecking iUnion (œÉ‚ãÜ ‚ü∂ ((œÉ ‚ü∂ œÑ‚ãÜ) ‚ü∂ œÑ‚ãÜ))                                            -- ‚à™_{œÉ} : œÉ‚ãÜ ‚ü∂ ((œÉ ‚ü∂ œÑ‚ãÜ) ‚ü∂ œÑ‚ãÜ)
| tcVar {x œÉ}: Term_TypeChecking (var x) œÉ                                                                       -- Variables x : œÉ
| tcApp {t‚ÇÅ t‚ÇÇ œÉ œÑ}: Term_TypeChecking t‚ÇÅ (œÉ ‚ü∂ œÑ) ‚Üí Term_TypeChecking t‚ÇÇ œÉ ‚Üí Term_TypeChecking (app t‚ÇÅ t‚ÇÇ) œÑ    -- If t‚ÇÅ : (œÉ ‚ü∂ œÑ) and t‚ÇÇ : œÉ, then t‚ÇÅt‚ÇÇ : œÑ

open Term_TypeChecking

-- -------------------------------------
-- TERM SUBSTITUTION IN L^œâ_*
-- -------------------------------------

-- Definition: term substitution, we replace x by replacement in some term t (lcons, var, app, rest)
def term_substitution (x : String) (replacement : Term) : Term ‚Üí Term
| .lcons t => match replacement with
              | .lcons r => .lcons (LTerm.Lsubstitution x r t)                        -- Since replacement has to be an LTerm, we have to add this pattern matching
              | _ => .lcons t
| .var y => if x = y
          then replacement
          else (.var y)
| .app t‚ÇÅ t‚ÇÇ => .app (term_substitution x replacement t‚ÇÅ) (term_substitution x replacement t‚ÇÇ)  -- In an application, we do the substitution in each term
| t => t                                                                              -- The combinators Œ†, Œ£ and the star constants ùî∞, ‚à™, ind_‚ãÉ are constants and hence are not affected by substitution

-- EXAMPLES: substituting in terms

#eval term_substitution "x" Œ†‚ÇÅ (var "x")                                        -- Replacing x by Œ†‚ÇÅ in x gives Œ†‚ÇÅ
#eval term_substitution "x" Œ†‚ÇÅ (var "y")                                        -- Replacing x by Œ†‚ÇÅ in y gives y
#eval term_substitution "x" ‚à™‚ÇÅ (((var "x")¬∑(var "y"))¬∑(var "z"))                -- Replacing x by ‚à™‚ÇÅ in (x¬∑y)¬∑z gives (‚à™‚ÇÅ¬∑y)¬∑z
#eval term_substitution "x" (lcons (LTerm.Lvar "b")) (lcons (LTerm.Lvar "a"))   -- Replacing x by (Lvariable b) in (Lvariable a) gives (Lvariable a) -> nothing happens


-- ------------------
-- FORMULAS (p.12-14)
-- ------------------

/-
We define the formulas of L^œâ_*:
  a) The atomic formulas (definition 1.6 - p.11)
  b) The base formulas (definition 1.10 - p.14)
  c) The formulas (definition 1.7 - p.13)
-/

inductive Formula : Type
| L_Form : LFormula ‚Üí Formula
| rel : String ‚Üí List Term ‚Üí Formula                              -- R(t‚ÇÅ, ..., t‚Çô) with R relational symbol of L and t‚ÇÅ,...,t‚Çô ground terms in L^{omega}_*
| eq : Term ‚Üí Term ‚Üí Formula                                      -- t =œÉ q
| mem : Term ‚Üí Term ‚Üí Formula                                     -- t ‚ààœÉ q
| not : Formula ‚Üí Formula                                         -- If A is a formula, then so is (¬¨A)
| or : Formula ‚Üí Formula ‚Üí Formula                                -- If A and B are formulas, then so is (A‚à®B)
| unbForall (x:String) : Formula ‚Üí Formula                        -- If A is a base formula, then so is (‚àÄx A)
| bForall : String ‚Üí Term ‚Üí Formula ‚Üí Formula                     -- If A is a formula, then so is (‚àÄx‚ààt A)
deriving Repr
--| bForall {x: String} {t:Term} {h: x ‚àâ t.freevars} : String ‚Üí Term ‚Üí Formula ‚Üí Formula          -- TO DO: passar para well-formed temos de acrescentar isto
-- deriving Repr, DecidableEq           --TODO: falta incluir isto

open Formula

-- Helper function: well-formed FOL formulas in L^œâ_*
inductive LFormula_is_wellformed_inStar : List String ‚Üí LFormula ‚Üí Prop
| wf_atomic {xs P ts} :
    (‚àÄ t ‚àà ts, LTerm_is_wellformed_inStar xs t) ‚Üí
    LFormula_is_wellformed_inStar xs (LFormula.atomic_L P ts)                -- If t‚ÇÅ,...,t‚Çô are well-formed terms, then so is P(t‚ÇÅ,...,t‚Çô)
| wf_not {xs A} :
    LFormula_is_wellformed_inStar xs A ‚Üí
    LFormula_is_wellformed_inStar xs (LFormula.not_L A)                      -- If A is a well-formed formula, then so is ¬¨A.
| wf_or {xs A B} :
    LFormula_is_wellformed_inStar xs A ‚Üí
    LFormula_is_wellformed_inStar xs B ‚Üí
    LFormula_is_wellformed_inStar xs (LFormula.or_L A B)                     -- If A and B are well-formed formulas, then so is A‚à®B.
| wf_forall {xs x A} :
    LFormula_is_wellformed_inStar (x :: xs) A ‚Üí
    LFormula_is_wellformed_inStar xs (LFormula.forall_L x A)                 -- If A is a well-formed formula (for our list xs and the bound variable x), then so is ‚àÄx A.

-- Definition: well-formed formulas in L^œâ_*
inductive Formula_is_wellformed : List String ‚Üí Formula ‚Üí Prop
| wf_L_Form {xs} {A : LFormula} : LFormula_is_wellformed_inStar xs A ‚Üí Formula_is_wellformed xs (L_Form A)
| wf_rel {xs P ts} :
    (‚àÄ t ‚àà ts, Term_is_wellformed xs t) ‚Üí Formula_is_wellformed xs (rel P ts)                                       -- If t‚ÇÅ,...,t‚Çô are well-formed terms, then so is P(t‚ÇÅ,...,t‚Çô)
| wf_eq {xs t‚ÇÅ t‚ÇÇ} :
    Term_is_wellformed xs t‚ÇÅ ‚Üí Term_is_wellformed xs t‚ÇÇ ‚Üí Formula_is_wellformed xs (eq t‚ÇÅ t‚ÇÇ)
| wf_mem {xs t‚ÇÅ t‚ÇÇ} :
    Term_is_wellformed xs t‚ÇÅ ‚Üí Term_is_wellformed xs t‚ÇÇ ‚Üí Formula_is_wellformed xs (mem t‚ÇÅ t‚ÇÇ)
| wf_not {xs A} :
    Formula_is_wellformed xs A ‚Üí Formula_is_wellformed xs (not A)                                                   -- If A is a well-formed formula, then so is ¬¨A.
| wf_or {xs A B} :
    Formula_is_wellformed xs A ‚Üí Formula_is_wellformed xs B ‚Üí Formula_is_wellformed xs (or A B)                     -- If A and B are well-formed formulas, then so is A‚à®B.
| wf_unbForall {xs x A} :
    Formula_is_wellformed (x :: xs) A ‚Üí Formula_is_wellformed xs (unbForall x A)                                    -- If A is a well-formed formula (for our list xs and the bound variable x), then so is ‚àÄx A.
| wf_bForall {xs x t A} :
    Formula_is_wellformed (x :: xs) A ‚Üí Formula_is_wellformed xs (bForall x t A)

-- -------------------------------------
-- FREE VARIABLES PARA FORMULAS EM L^œâ_*
-- -------------------------------------

-- DEFINITION: the free variables of a formula in StarLang
def Formula.freevars : Formula ‚Üí Finset String
| .L_Form (A : LFormula) => LFormula.Lfreevars_formula A
| .rel _ ts => Finset.fold (fun x y => x ‚à™ y) {} Term.freevars ts.toFinset
| .eq t‚ÇÅ t‚ÇÇ
| .mem t‚ÇÅ t‚ÇÇ => t‚ÇÅ.freevars ‚à™ t‚ÇÇ.freevars
| .or A B => A.freevars ‚à™ B.freevars
| .not A => A.freevars
| .unbForall x A
| .bForall x t A => A.freevars \ ([x].toFinset)


-- DEFINITION: all the variables of a formula in StarLang
def Formula.allvars : Formula ‚Üí Finset String
| .L_Form A => LFormula.Lallvars_formula A                                    -- The variables of a Formula are the ones of the formula when seen as an LFormula
| .rel _ ts => Finset.fold (fun x y => x ‚à™ y) {} Term.freevars ts.toFinset    -- All the variables from the list of terms used in the predicate
| .eq t‚ÇÅ t‚ÇÇ
| .mem t‚ÇÅ t‚ÇÇ => t‚ÇÅ.freevars ‚à™ t‚ÇÇ.freevars                                     -- For both terms, we collect the variables from both and consider the union of those sets
| .or A B => A.allvars ‚à™ B.allvars                                            -- Take the variables from both subformulas and consider the union of those sets
| .not A => A.allvars                                                         -- The variables of ¬¨A are the ones of A
| .unbForall x A => A.allvars ‚à™ {x}                                           -- The variables of ‚àÄx A are the ones of A together with the bound variable
| .bForall x t A => t.freevars ‚à™ A.allvars ‚à™ {x}                              -- The variables of ‚àÄx‚ààt A are the ones of A together with the bound variable and the variables in t

-- Example after notation

/-
With these definitions, we can create assumptions such as:
    x is a free variable of formula A       -> In Lean: x ‚àà A.freevars
    x is not a free variable of formula A   -> In Lean: x ‚àâ A.freevars

    x is a variable of formula A            -> In Lean: x ‚àà A.allvars
    x is not a variable of formula A        -> In Lean: x ‚àâ A.allvars
-/

-- --------
-- NOTATION
-- --------

-- NOTATION: Notation for the equality and the membership symbols
notation t‚ÇÅ "=‚ÇÅ" t‚ÇÇ => Formula.eq t‚ÇÅ t‚ÇÇ
notation t‚ÇÅ "‚àà‚ÇÅ" t‚ÇÇ => Formula.mem t‚ÇÅ t‚ÇÇ

-- NOTATION: Notation for the primitive symbols ¬¨, ‚à®, ‚àÄx and ‚àÄx‚ààt in L^{omega}_*
notation "¬¨‚ÇÅ" A => not A
notation A "‚à®‚ÇÅ" B => or A B
notation "V‚ÇÅ" => unbForall
notation "bV‚ÇÅ" => bForall
-- notation "b‚àÄ‚ÇÅ" x t A => bForall x t A

-- DEFINITION 1.8 (p.14): The bounded existential quantifier ‚àÉx‚ààt (defined symbol)

-- The unbounded existential quantifier ‚àÉx A
@[simp]
def unbExists (x : String) (A : Formula) : Formula :=
  ¬¨‚ÇÅ(unbForall x (¬¨‚ÇÅ A))

-- The bounded existential quantifier ‚àÉx A
@[simp]
def bExists (x : String) (t : Term) (A : Formula) : Formula :=
  ¬¨‚ÇÅ(bForall x t (¬¨‚ÇÅ A))

notation "E‚ÇÅ" => unbExists
notation "bE‚ÇÅ" => bExists

-- Testing the notation
-- def Notation_test (x : String) (t : Term) (A : Formula) : Formula := bV‚ÇÅ x t A
-- #check Notation_test

-- --------------------
-- DEFINED SYMBOLS (p.8 and p.14):
-- Usual logical abbreviations for the defined symbols ‚àß, ‚Üí, ‚Üî, ‚àÉx and ‚àÉx‚ààt in L^{omega}_*
-- --------------------

-- Conjunction:  A ‚àß B := ¬¨(¬¨A‚à®¬¨B)
@[simp]
def F_and (A B : Formula) : Formula :=
  ¬¨‚ÇÅ ((¬¨‚ÇÅ A) ‚à®‚ÇÅ (¬¨‚ÇÅ B))

notation A "‚àß‚ÇÅ" B => F_and A B

-- Implication:  A ‚Üí B := ¬¨ A ‚à® B
@[simp]
def F_implies (A B : Formula) : Formula :=
  (¬¨‚ÇÅ A) ‚à®‚ÇÅ B

notation A "‚Üí‚ÇÅ" B => F_implies A B

-- Equivalence:  A ‚Üî B := (A ‚Üí B) ‚àß (B ‚Üí A)
@[simp]
def F_iff (A B : Formula) : Formula :=
  ¬¨‚ÇÅ ((¬¨‚ÇÅ((¬¨‚ÇÅA) ‚à®‚ÇÅ B)) ‚à®‚ÇÅ (¬¨‚ÇÅ((¬¨‚ÇÅB) ‚à®‚ÇÅ A)))
  -- (A ‚Üí‚ÇÅ B) ‚àß‚ÇÅ (B ‚Üí‚ÇÅ A)
  -- (¬¨‚ÇÅ A ‚à®‚ÇÅ B) ‚àß‚ÇÅ (¬¨‚ÇÅ B ‚à®‚ÇÅ A)

notation A "‚Üî‚ÇÅ" B => F_iff A B

-- EXAMPLE OF FREE VARIABLES AND VARIABLES OF A FORMULA

-- EXAMPLE 1: Formula R(x,y) ‚à® (‚àÄz‚ààt Q(z)) - Free variables and check whether sentence
def ex_freevars_formula := (rel "R" [var "x", var "y"]) ‚à®‚ÇÅ (bV‚ÇÅ "z" (var "t") (rel "Q" [var "z"]))
#eval Formula.freevars ex_freevars_formula                         -- The set of free variables is the set {x,y}, that is {"x", "y"}
#eval Formula.allvars ex_freevars_formula             -- TODO: aqui aparece t como vari√°vel, √© preciso mudar var "t" aqui e nos exemplos em baixo


-- ----------------------------
-- SENTENCES (CLOSED FORMULAS)
-- ----------------------------

def isClosed (A : Formula) : Prop := Formula.freevars A = {}
def isClosed_check (A : Formula) : Bool := (Formula.freevars A) = {}       -- Prints true or false dependendo se temos var livres ou n√£o

-- EXAMPLE 1: Formula R(x,y) ‚à® (‚àÄz‚ààt Q(z)) - Free variables and check whether sentence
def ex1_freevars_formula := (rel "R" [var "x", var "y"]) ‚à®‚ÇÅ (bV‚ÇÅ "z" (var "t") (rel "Q" [var "z"]))
#eval Formula.freevars ex1_freevars_formula                         -- The set of free variables is the set {x,y}, that is {"x", "y"}
#eval isClosed_check ex1_freevars_formula                           -- Since ex1_freevars_formula has x and y as free variables, the output is false

-- EXAMPLE 2: Formula R(x,y) - Free variables and check whether sentence
def ex2_freevars_formula := (rel "R" [var "x", var "y"])
#eval Formula.freevars ex2_freevars_formula                         -- The set of free variables is the set {x,y}, that is {"x", "y"}
#eval isClosed_check ex2_freevars_formula                           -- Since ex2_freevars_formula has x and y as free variables, the output is false

-- EXAMPLE 3: Formula ‚àÄz‚ààt Q(z) - Free variables and check whether sentence
def ex3_freevars_formula := (bV‚ÇÅ "z" (var "t") (rel "Q" [var "z"]))
#eval Formula.freevars ex3_freevars_formula                         -- The set of free variables is the empty set ‚àÖ
#eval isClosed_check ex3_freevars_formula                           -- Since ex3_freevars_formula has no free variables, the output is true


-- ------------------------------------------------------
-- CHECKING FORMULAS:
-- ------------------------------------------------------

-- Checks whether a given formula is atomic:
inductive isAtomic : Formula ‚Üí Prop
| at_rel : isAtomic (rel x l_term)
| at_eq : isAtomic (eq t‚ÇÅ t‚ÇÇ)
| at_mem : isAtomic (mem t‚ÇÅ t‚ÇÇ)

-- Checks whether a given formula is base:
inductive isBase : Formula ‚Üí Prop
| b_atom : isAtomic A ‚Üí isBase A                                                -- Atomic formulas are base formulas
| b_not (h: isBase A) : isBase (not A)                                          -- If A is base, then so is ¬¨‚ÇÅA
| b_or (h1: isBase A) (h2 : isBase B) : isBase (or A B)                         -- If A and B are base, then so is A‚à®‚ÇÅB
| b_bForall (x : String) (t : Term) (h : isBase A) : isBase (bForall x t A)     -- If A is base, then so is ‚àÄx‚ààt A

open isBase

-- Example: Let A be an atomic formula (assumption h), then it is base.
example (A : Formula) (h : isAtomic A)  : (isBase A) := by
  exact b_atom h

example (A B : Formula) (hA_at : isAtomic A) (hB_b : isBase B) : (isBase (A‚à®‚ÇÅB)) := by
  have h := b_atom hA_at
  exact b_or h hB_b

-- --------------------------------------------------------------------------
-- LEMMAS: Defined symbols of base formulas are also base (Remark 1.11, p.14)
-- --------------------------------------------------------------------------

-- Lemma Conj_base states that if A and B are base formulas, then so is their conjunction A ‚àß B
lemma Conj_base (A B : Formula) (hA : isBase A) (hB : isBase B) : (isBase (A‚àß‚ÇÅB)) := by
  unfold F_and
  have h_nA := b_not hA
  have h_nB := b_not hB
  have h_or_nAnB := b_or h_nA h_nB
  exact b_not h_or_nAnB

-- Lemma Imp_base states that if A and B are base formulas, then so is their implication A ‚Üí B
lemma Imp_base (A B : Formula) (hA : isBase A) (hB : isBase B) : (isBase (A‚Üí‚ÇÅB)) := by
  unfold F_implies
  have h_nA := b_not hA
  exact b_or h_nA hB

-- Lemma Iff_base states that if A and B are base formulas, then so is their equivalence A ‚Üî B
lemma Iff_base (A B : Formula) (hA : isBase A) (hB : isBase B) : (isBase (A‚Üî‚ÇÅB)) := by
  unfold F_iff
  have h_nA := b_not hA
  have h_nB := b_not hB
  have h_or_nAB := b_or h_nA hB
  have h_or_nBA := b_or h_nB hA
  have h_n_or_nAB := b_not h_or_nAB
  have h_n_or_nBA := b_not h_or_nBA
  have H := b_or h_n_or_nAB h_n_or_nBA
  exact b_not H

-- Lemma unbForall_base states that if A is a base formula, then so is ‚àÉx‚ààt A
lemma bExists_base {A : Formula} (x : String) (t : Term) (hA : isBase A) : (isBase (bE‚ÇÅ x t A)) := by
  unfold bExists
  have h_nA := b_not hA
  have h_unbForall_nA := b_bForall x t h_nA
  exact b_not h_unbForall_nA

-- ------------------
-- EXAMPLE 1.6 (p.14)
-- ------------------

-- Example 1.6.1 (p.14): If B is a base formula, then so is ‚àÄx‚ààt B(x)
example (B : Formula) (hB_b : isBase B) (x : String) (t : Term): (isBase (bV‚ÇÅ x t (¬¨‚ÇÅ B))) := by
  have H := b_not hB_b
  exact b_bForall x t H

-- Example 1.6.2 (p.14): If A and B are base formulas, then so is ‚àÄx‚ààt ‚àÉy‚ààq (A‚à®B)
example (A B : Formula) (hA_b : isBase A) (hB_b : isBase B) (x y : String) (t q : Term): (isBase (bV‚ÇÅ x t (bE‚ÇÅ y q (A ‚à®‚ÇÅ B)))) := by
  have H_or_AB := b_or hA_b hB_b
  have H_bExists := bExists_base y q H_or_AB
  exact b_bForall x t H_bExists

-- ------------------------------------------------------
-- TYPECHECKING
-- We typecheck the components of the formulas of L^œâ_*.
-- This guarantees that the formulas have admissible types.
-- ------------------------------------------------------

inductive Formula_TypeChecking : Formula ‚Üí Prop
| tcRel {R l_terms} :                                               -- R √© relational symbol DE L (falta); l_terms √© uma lista de termos
    (‚àÄ t, t ‚àà l_terms ‚Üí Term_TypeChecking t G) ‚Üí
    Formula_TypeChecking (Formula.rel R l_terms)
| tcEq {œÉ t‚ÇÅ t‚ÇÇ} :
    Term_TypeChecking t‚ÇÅ œÉ ‚Üí
    Term_TypeChecking t‚ÇÇ œÉ ‚Üí
    Formula_TypeChecking (Formula.eq t‚ÇÅ t‚ÇÇ)
| tcMem {œÉ t‚ÇÅ t‚ÇÇ} :
    Term_TypeChecking t‚ÇÅ œÉ ‚Üí
    Term_TypeChecking t‚ÇÇ (œÉ‚ãÜ) ‚Üí
    Formula_TypeChecking (Formula.mem t‚ÇÅ t‚ÇÇ)
| tcNot {A} :
    Formula_TypeChecking A ‚Üí Formula_TypeChecking (Formula.not A)
| tcOr {A B} :
    Formula_TypeChecking A ‚Üí
    Formula_TypeChecking B ‚Üí
    Formula_TypeChecking (Formula.or A B)
| tcbForall {x œÉ t A} :
    Term_TypeChecking (Term.var x) œÉ ‚Üí
    Term_TypeChecking t (œÉ‚ãÜ) ‚Üí
    Formula_TypeChecking A ‚Üí
    Formula_TypeChecking (Formula.bForall x t A)
| tcunbForall {x œÉ A} :
    Term_TypeChecking (Term.var x) œÉ ‚Üí
    Formula_TypeChecking A ‚Üí
    Formula_TypeChecking (Formula.unbForall x A)


-- -------------------------------------
-- FORMULA SUBSTITUTION IN L^œâ_*
-- -------------------------------------

def substitution_formula (x : String) (replacement : Term) : Formula ‚Üí Formula
| (L_Form A) => match replacement with
              | .lcons r => L_Form (LFormula.Lsubstitution_formula x r A)
              | _ => (L_Form A)
| (rel P terms) => rel P (terms.map (term_substitution x replacement))
| (t‚ÇÅ =‚ÇÅ t‚ÇÇ) => (term_substitution x replacement t‚ÇÅ) =‚ÇÅ (term_substitution x replacement t‚ÇÇ)
| (t‚ÇÅ ‚àà‚ÇÅ t‚ÇÇ) => (term_substitution x replacement t‚ÇÅ) ‚àà‚ÇÅ (term_substitution x replacement t‚ÇÇ)
| (Formula.not A) => ¬¨‚ÇÅ (substitution_formula x replacement A)                                                       -- recursivamente em A
| (Formula.or A B) => (substitution_formula x replacement A) ‚à®‚ÇÅ (substitution_formula x replacement B)               -- recursivamente em A e B
| (V‚ÇÅ y A) => if x = y then V‚ÇÅ y A
              else V‚ÇÅ y (substitution_formula x replacement A)
| (bV‚ÇÅ y t A) => if x = y then bV‚ÇÅ y t A
              else (bV‚ÇÅ y t (substitution_formula x replacement A))

-- TESTE daqui ( )
--example : substitution_formula b ((Term.var "x")¬∑(Term.var "y")) A := by sorry
--example (x : String) (t : Term) (A : Formula) : (substitution_formula x t A) := by sorry
def ex0_subst (A:Formula) : Formula :=
    A

def ex00_subst (x : String) (t : Term) (A:Formula) : Formula :=
    substitution_formula x t A
-- at√© aqui

-- EXAMPLES: formula substitution           -- TODO: falta o repr para podermos ter estes examplos com #eval

-- Example 1:
--#eval substitution_formula "x" Œ†‚ÇÅ (rel "R" [var "x", var "y"])        -- gives rel "R" [Œ†‚ÇÅ, Term.var "y"]

/-
-- Example 2:
def ex2_subst : Formula :=
    (¬¨‚ÇÅ( (var "x")‚àà‚ÇÅ(var "y") )) ‚à®‚ÇÅ ((var "z")=‚ÇÅ(var "w"))

#eval substitution_formula "x" ‚à™‚ÇÅ ex2_subst                             -- gives (¬¨‚ÇÅ(‚à™‚ÇÅ ‚àà‚ÇÅ (var "y"))) ‚à®‚ÇÅ ((var "z")=‚ÇÅ(var "w"))

-- Example 3:
def ex3_subst : Formula :=
  bForall "y" (var "a") ((var "x")=‚ÇÅ(var "y"))

#eval substitution_formula "x" ind_‚ãÉ‚ÇÅ ex3_subst                         -- gives ‚àÄ "y" ‚àà (var "a") (ind_‚ãÉ‚ÇÅ =‚ÇÅ (var "y"))

-/






-- --------------------------------------
-- --------------------------------------
-- ------------- AXIOMS -----------------
-- --------------------------------------
-- --------------------------------------

--def normal_form (A B : Formula) (x: String) : Formula ‚Üí Formula
--| or A B => A
--| bForall x A => A
--| t => t

-- Drei strescher ass gleich, wees net wei dat heescht, syntactic equality
inductive Equivalent : Formula ‚Üí Formula ‚Üí Prop
| id : Equivalent A A
| comm : Equivalent A B ‚Üí Equivalent B A
| double_neg : Equivalent (¬¨‚ÇÅ(¬¨‚ÇÅA)) A
| comm_or : Equivalent (A‚à®‚ÇÅB) (B‚à®‚ÇÅA)                              -- TODO: the same with other obvious stuff
--| nf_left : Equivalent A B ‚Üí Equivalent (normal_form A) B
--| nf_right : Equivalent A B ‚Üí Equivalent A (normal_form B)

-- ---------------------------------------------------------------------------------
-- -------------------------------   AXIOMATIC   -----------------------------------
-- ---------------------------------------------------------------------------------

-- Reuni√£o: acrescentar construtor para dizer que tem ou n√£o freevars

/- ISTO
inductive Logic
| PL
| PL_bAC
-/

--ISTO inductive isTrue {L:Logic} : Formula ‚Üí Prop
inductive isTrue : Formula ‚Üí Prop
-- AXIOM SCHEMA (Shoenfield)
| lem :                                       -- A ‚à® (¬¨A)
      isTrue (A ‚à®‚ÇÅ (¬¨‚ÇÅA))
| substitution {t:Term} {x:String} :          -- ‚àÄx A(x) ‚Üí A(t)
       --x ‚àà xs ‚Üí
       --closed_under_formula A xs ‚Üí
       x ‚àà A.freevars ‚Üí
       isTrue (.unbForall x A) ‚Üí
       --------------
       isTrue (substitution_formula x t A)

-- INFERENCE RULES (Shoenfield)
| expansion:                                  -- A => A‚à®B
      isTrue A ‚Üí
      ---------------
      isTrue (A ‚à®‚ÇÅ B)
| contraction :                               -- A‚à®A => A
      isTrue (A ‚à®‚ÇÅ A) ‚Üí
      ---------------
      isTrue A
| associativity :                             -- A‚à®(B‚à®C) => (A‚à®B)‚à®C
      isTrue (A ‚à®‚ÇÅ (B ‚à®‚ÇÅ C)) ‚Üí
      ---------------
      isTrue ((A ‚à®‚ÇÅ B) ‚à®‚ÇÅ C)
| cut :                                       -- A‚à®B, (¬¨A)‚à®C => B‚à®C
      isTrue (A ‚à®‚ÇÅ B) ‚Üí
      isTrue ((¬¨‚ÇÅA)‚à®‚ÇÅC) ‚Üí
      ---------------
      isTrue (B ‚à®‚ÇÅ C)
| forall_introduction:                        -- A(x) ‚à® B => ‚àÄx A(x) ‚à® B
      x ‚àà A.freevars ‚Üí
      isTrue (A ‚à®‚ÇÅ B) ‚Üí
      x ‚àâ B.freevars ‚Üí                        -- provided that x does not occur free in B
      ---------------
      isTrue ((unbForall x A) ‚à®‚ÇÅ B)

-- OTHER AXIOMS
| equivalence :
      (Equivalent A B) ‚Üí
      isTrue A ‚Üí
      isTrue B
| AxE‚ÇÅ (x : String) :
    isTrue ((var x) =‚ÇÅ (var x))
-- Problema yes: falta A(x) e A(y) -> criar nota√ß√£o?
--| AxE‚ÇÇ (x y : String) (A : Formula) (h : x ‚àà A.freevars): isTrue ((((var x) =‚ÇÅ (var y))‚àß‚ÇÅA) ‚Üí‚ÇÅ B) ‚àß (y ‚àà A.freevars)
--| AxE‚ÇÇ (x y : String) : isTrue ((((var x) =‚ÇÅ (var y))‚àß‚ÇÅ A) ‚Üí‚ÇÅ A)        FALTA: falta x=y ‚àß A(x) ‚Üí A[substituition](y)
| Teste (x y : String) (A B : Formula) (h: x ‚àà A.freevars) (Hy : y‚àâA.freevars) (HB : B = (substitution_formula x (var y) A)): isTrue ((((var x) =‚ÇÅ (var y))‚àß‚ÇÅA) ‚Üí‚ÇÅ B)
| AxU (x : String) (t : Term) (A : Formula) :
    isTrue ((bV‚ÇÅ x t A) ‚Üî‚ÇÅ (V‚ÇÅ x (((var x) ‚àà‚ÇÅ t) ‚Üí‚ÇÅ A)))
| AxC‚ÇÅ (t‚ÇÅ t‚ÇÇ : Term) :                                         -- TODO: mudar isto tudo para variables em vez de terms
    isTrue (((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) =‚ÇÅ t‚ÇÅ)
| AxC‚ÇÇ (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) :
    isTrue ((((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) =‚ÇÅ ((t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ)))
| AxP‚ÇÅ (t‚ÇÅ t‚ÇÇ : Term) :
    isTrue (((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ) =‚ÇÅ (t‚ÇÇ¬∑t‚ÇÅ))
| AxP‚ÇÇ (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) :
    isTrue (((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ) =‚ÇÅ ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ)))
| AxS‚ÇÅ (t‚ÇÅ t‚ÇÇ : Term) :
    isTrue ((t‚ÇÅ ‚àà‚ÇÅ (ùî∞‚ÇÅ¬∑t‚ÇÇ)) ‚Üî‚ÇÅ (t‚ÇÅ =‚ÇÅ t‚ÇÇ))
| AxS‚ÇÇ (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) : isTrue ((t‚ÇÅ ‚àà‚ÇÅ ((‚à™‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ) ) ‚Üî‚ÇÅ ((t‚ÇÅ ‚àà‚ÇÅ t‚ÇÇ) ‚à®‚ÇÅ (t‚ÇÅ ‚àà‚ÇÅ t‚ÇÉ)))
| AxS‚ÇÉ (a f b : Term) : isTrue ((b ‚àà‚ÇÅ ((ind_‚ãÉ‚ÇÅ¬∑a)¬∑f)) ‚Üî‚ÇÅ (bE‚ÇÅ x a (b ‚àà‚ÇÅ (f¬∑(var x)))))
| bAC {x y f : String} : isTrue ((V‚ÇÅ x (E‚ÇÅ y A)) ‚Üí‚ÇÅ (E‚ÇÅ f (V‚ÇÅ x (bE‚ÇÅ y ((Term.var f)¬∑(Term.var x)) A))))    -- bAC^œâ_*
-- ISTO | bAC {x y f : String} {H:L=Logic.PL_bAC}: isTrue ((V‚ÇÅ x (E‚ÇÅ y A)) ‚Üí‚ÇÅ (E‚ÇÅ f (V‚ÇÅ x (bE‚ÇÅ y ((Term.var f)¬∑(Term.var x)) A))))    -- bAC^œâ_*
-- Sempre que for para usar o isTrue √© preciso escolher a l√≥gica!

-- TESTE: o lemma eq_symmetry est√° a dar erro, mas o teste com #check mostra que a sintaxe est√° good
def f : Term := var "f"
def g : Term := var "g"

#check (f =‚ÇÅ g) ‚Üí‚ÇÅ (g =‚ÇÅ f)

-- Problema: this ‚Üì is not working
--lemma eq_symmetry (p q : Term): (p =‚ÇÅ q) := sorry
lemma eq_symmetry : ‚àÄ(p q:Term), isTrue ((p=‚ÇÅq)‚Üí‚ÇÅ(q=‚ÇÅp)) := sorry -- construtores de isTrue
-- ISTO lemma eq_symmetry : ‚àÄ(p q:Term), isTrue (L := Logic.PL) ((p=‚ÇÅq)‚Üí‚ÇÅ(q=‚ÇÅp)) := sorry -- construtores de isTrue

--theorem tastino (x y : String) : Formula

--lemma eq_symmetry (x y : String) : (((var x) =‚ÇÅ (var y)) ‚Üí‚ÇÅ ((var y) =‚ÇÅ (var x))) := sorry

--lemma eq_transitivity (x y z : String) : ((((var x) =‚ÇÅ (var y)) ‚àß‚ÇÅ ((var y) =‚ÇÅ (var z))) ‚Üí‚ÇÅ ((var x) =‚ÇÅ (var z))) := sorry


-- -------------------------------------------------------------------------------------
-- -------------------------------------------------------------------------------------

-- ----------------------------------------------------
-- ------------ COMBINATORIAL COMPLETENESS ------------ (Section 1.2.4)
-- ----------------------------------------------------

theorem combinatorial_completeness (x : String) : ‚àÄ(t:Term), ‚àÉ(q:Term), ‚àÄ(s:Term),
  isTrue ((q¬∑s) =‚ÇÅ (term_substitution x s t)) :=
  -- ISTO isTrue (L := Logic.PL) ((q¬∑s) =‚ÇÅ (term_substitution x s t)) :=
by
  intro t
  have t‚ÇÇ := t
  cases t with                                     -- TO DO: AQUI como fazer os meus cases? ver def 1.11
  | var y =>
      by_cases h: x = y
      . existsi ((Œ£‚ÇÅ¬∑Œ†‚ÇÅ)¬∑Œ†‚ÇÅ)
        intro s
        unfold term_substitution
        rewrite [h]
        simp
        have H1 := isTrue.AxC‚ÇÅ s (Œ†‚ÇÅ¬∑s)
        have H2 := isTrue.AxC‚ÇÇ Œ†‚ÇÅ Œ†‚ÇÅ s
        --ISTO have H1 := isTrue.AxC‚ÇÅ (L := Logic.PL) s (Œ†‚ÇÅ¬∑s)
        --ISTO have H2 := isTrue.AxC‚ÇÇ (L := Logic.PL) Œ†‚ÇÅ Œ†‚ÇÅ s    -- usar simetria/transitivity da igualdade
        sorry
      . existsi (Œ†‚ÇÅ¬∑(var y))
        intro s
        rewrite [term_substitution]
        rewrite [if_neg h]
        exact isTrue.AxC‚ÇÅ (var y) s
          --match y with
            --| x => intro ((Œ£‚ÇÅ¬∑Œ†‚ÇÅ)¬∑Œ†‚ÇÅ)
            --| _ => var y
            --sorry --intro ((Œ£‚ÇÅ¬∑Œ†‚ÇÅ)¬∑Œ†‚ÇÅ) FAZER PATTERNMATCH
  | _ =>
      by_cases h: x‚àà t‚ÇÇ.freevars
      . sorry         -- same as
      . existsi (Œ†‚ÇÅ¬∑t‚ÇÇ)           -- TODO: vai precisar de lemas auxiliares (se a variavel n√£o esta nas freevars, n√£o muda nada na substitui√ßao)
        intro s
        unfold term_substitution
        --rewrite [if_neg h]
        --exact isTrue.AxC‚ÇÅ (var y) s
        sorry


inductive lambda : Type
| la (s : String) (body : Term): lambda

def lambda.to_term : lambda ‚Üí Term
| .la x (var y) => if x=y then ((Œ£‚ÇÅ¬∑Œ†‚ÇÅ)¬∑Œ†‚ÇÅ) else (Œ†‚ÇÅ¬∑(var y))
| .la x (t¬∑s) => if x‚àâ(t¬∑s).freevars then (Œ†‚ÇÅ¬∑t) else ((Œ£‚ÇÅ¬∑(lambda.la x t).to_term)¬∑(lambda.la x s).to_term)
| .la x t => if x‚àât.freevars then (Œ†‚ÇÅ¬∑t) else (by sorry) -- Reuni√£o: do pattermatching por extenso com as constantes

-- Problema: how to deal with this?
theorem combinatorial_completeness2 (x : String) : ‚àÄ(t:Term), ‚àÉ(q:Term), ‚àÄ(s:Term),
  isTrue ((q¬∑s) =‚ÇÅ (term_substitution x s t)) :=
  --ISTO isTrue (L := Logic.PL) ((q¬∑s) =‚ÇÅ (term_substitution x s t)) :=
by
  intro t
  have t‚ÇÇ := t -- Reuni√£o: √© preciso tirar isto para reconstruir √† m√£o
  cases t with
  | var y =>                              -- CASO 1: t √© uma vari√°vel
      by_cases h: x = y
      . existsi ((Œ£‚ÇÅ¬∑Œ†‚ÇÅ)¬∑Œ†‚ÇÅ)              --  Caso 1a: t √© a vari√°vel x
        intro s
        unfold term_substitution
        rewrite [h]
        simp
        have H1 := isTrue.AxC‚ÇÅ s (Œ†‚ÇÅ¬∑s)
        have H2 := isTrue.AxC‚ÇÇ Œ†‚ÇÅ Œ†‚ÇÅ s
        --ISTO have H1 := isTrue.AxC‚ÇÅ (L := Logic.PL) s (Œ†‚ÇÅ¬∑s)
        --ISTO have H2 := isTrue.AxC‚ÇÇ (L := Logic.PL) Œ†‚ÇÅ Œ†‚ÇÅ s        -- usar simetria/transitivity da igualdade
                                              -- acho que precisamos de extensionality de isTrue
        sorry
      . existsi (Œ†‚ÇÅ¬∑(var y))              --  Caso 1b: t n√£o √© a vari√°vel x
        intro s
        rewrite [term_substitution]
        rewrite [if_neg h]                -- porque x ‚â† y (hip√≥tese h), logo d√° var y
        exact isTrue.AxC‚ÇÅ (var y) s
        -- ISTO exact isTrue.AxC‚ÇÅ (L := Logic.PL) (var y) s
  | _ =>     -- Reuni√£o: temos de fazer todos os casos das constantes                           -- CASO 2: t n√£o √© uma vari√°vel, √© outra coisa (constante ou aplica√ß√£o)
      sorry
      /-
      by_cases h: x‚àà t‚ÇÇ.freevars          --         dois casos: t n√£o tem x (x does not occur in t) OU t tem x (e √© aplica√ß√£o)
      . sorry
      . existsi (Œ†‚ÇÅ¬∑t‚ÇÇ)
        intro s
        unfold term_substitution
        induction s
        . rename_i b
          --rename_i a
          have d := isTrue.AxC‚ÇÅ t‚ÇÇ
          --have r1 : t‚ÇÇ = lcons (LTerm.Lsubstitution x b a) := by sorry
          --apply d
          sorry
      -/



-- (Œªx.t)s = s[t/x] = q¬∑s
-- (Œªx.t) -> existsi (Œ£‚ÇÅ¬∑(Œªx.t))¬∑(Œªx.q)

--def term_substitution (x : String) (replacement : Term) : Term ‚Üí Term


-- TO DO: precisamos de conseguir dizer "Consider t(x), where x is a variable of t"
-- chega dizer x ‚àà t.allvars ?

-- TO DO: nota√ß√£o para A(x) se A:Formula e x ‚àà A.allvars ?
-- Problema yes: preciso que isto seja uma Formula

example : {F:Formula // {"x","y"} ‚äÜ F.allvars} ‚Üí Prop := by sorry


-- REMARK 1.14: Every type is inhabited by at least one term (TODO)




-- ----------------------------------------------------
-- ------------------- CONVERSIONS -------------------- (Section 1.2.5)
-- ----------------------------------------------------

-- Definition 1.14 (Conversions)
@[simp]
def conv : Term ‚Üí Term
| ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) => t‚ÇÅ
| (((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) => ((t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ))
| ((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ) => (t‚ÇÇ¬∑t‚ÇÅ)
| ((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ) => ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ))
| t => t


notation t "‚ñπ" => conv t

-- Checks whether a term converts to another one
inductive ConvertsTo : Term ‚Üí Term ‚Üí Prop
| c1_pi (t‚ÇÅ t‚ÇÇ): ConvertsTo ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) t‚ÇÅ
| c2_sigma (t‚ÇÅ t‚ÇÇ t‚ÇÉ): ConvertsTo (((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) ((t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ))
| c3_indU (t‚ÇÅ t‚ÇÇ) : ConvertsTo ((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ) (t‚ÇÇ¬∑t‚ÇÅ)
| c4_indU_binU (t‚ÇÅ t‚ÇÇ t‚ÇÉ): ConvertsTo ((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ) ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ))

def ConvertsTo_check (t‚ÇÅ t‚ÇÇ : Term): Bool := if conv t‚ÇÅ = t‚ÇÇ then true else false


-- EXAMPLE: using conv to convert ((Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ) to p‚ÇÅ for terms p‚ÇÅ p‚ÇÇ
--          and using ConvertsTo_check to check whether a term converts to another term

def ex_conv (q t : Term) := ((Œ†‚ÇÅ¬∑q)¬∑t)

def p‚ÇÅ : Term := var "p‚ÇÅ"
def p‚ÇÇ : Term := var "p‚ÇÇ"

#eval ex_conv p‚ÇÅ p‚ÇÇ                         -- evaluates to (Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ
#eval conv ((Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ)                     -- evaluates to p‚ÇÅ (i.e. (Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ converts to p‚ÇÅ)
#eval ((Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ) ‚ñπ                        -- evaluates to p‚ÇÅ (i.e. (Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ converts to p‚ÇÅ)

#eval ConvertsTo_check ((Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ) p‚ÇÅ      -- true: the term (Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ converts to p‚ÇÅ
#eval ConvertsTo_check ((Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ) p‚ÇÇ      -- false: the term (Œ†‚ÇÅ¬∑p‚ÇÅ)¬∑p‚ÇÇ does not convert to p‚ÇÅ


-- --------------------------
-- Conversions preserve types
-- --------------------------

-- ---------------------
-- REMARK 1.21 (p.26):
-- Conversions preserve types
-- ---------------------


lemma Conv1_TypeChecking (œÉ œÑ : FType) (t‚ÇÅ t‚ÇÇ : Term) (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ œÉ) (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ œÑ) : Term_TypeChecking (conv ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)) œÉ := by
  --exact ht‚ÇÅ
  --let H : Term := conv ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)
  have H2 : conv ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) = t‚ÇÅ := by simp [conv]              -- Ter o resultado da conv as a new assumption
  rw [H2]
  exact ht‚ÇÅ


lemma Conv2_TypeChecking (œÉ œÑ œÅ : FType) (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ (œÅ ‚ü∂ œÉ ‚ü∂ œÑ)) (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ (œÅ ‚ü∂ œÉ)) (ht‚ÇÉ : Term_TypeChecking t‚ÇÉ œÅ) : Term_TypeChecking (conv ((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) œÑ := sorry

-- MANUALMENTE:

-- TODO not now: mudar hPi? not needed? Mudar Term_Checking.tcPi de {œÉ œÑ} para (œÉ œÑ : FType) ?

-- Conversion 1 preserves types - ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) ‚ñπ t‚ÇÅ
example (œÉ œÑ : FType) (t‚ÇÅ t‚ÇÇ : Term)
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ œÉ)
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ œÑ)
    (hPi : Term_TypeChecking Œ†‚ÇÅ (œÉ ‚ü∂ œÑ ‚ü∂ œÉ)) : Term_TypeChecking ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) œÉ :=
  by
    have H := Term_TypeChecking.tcApp hPi ht‚ÇÅ
    exact Term_TypeChecking.tcApp H ht‚ÇÇ

-- Conversion 2 preserves types - (((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) ‚ñπ ((t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ))
example (œÉ œÑ œÅ : FType) (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term)
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ (œÉ ‚ü∂ (œÑ ‚ü∂ œÅ)))
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ (œÉ ‚ü∂ œÑ))
    (ht‚ÇÉ : Term_TypeChecking t‚ÇÉ œÉ) : Term_TypeChecking ((t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ)) œÅ :=
  by
    have H1 := Term_TypeChecking.tcApp ht‚ÇÅ ht‚ÇÉ
    have H2 := Term_TypeChecking.tcApp ht‚ÇÇ ht‚ÇÉ
    exact Term_TypeChecking.tcApp H1 H2

example (œÉ œÑ œÅ : FType) (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term)
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ (œÉ ‚ü∂ (œÑ ‚ü∂ œÅ)))
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ (œÉ ‚ü∂ œÑ))
    (ht‚ÇÉ : Term_TypeChecking t‚ÇÉ œÉ)
    (hSigma : Term_TypeChecking Œ£‚ÇÅ ((œÉ ‚ü∂ (œÑ ‚ü∂ œÅ)) ‚ü∂ ((œÉ ‚ü∂ œÑ) ‚ü∂ (œÉ ‚ü∂ œÅ)))) : Term_TypeChecking (((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) œÅ :=
  by
    have H1 := Term_TypeChecking.tcApp hSigma ht‚ÇÅ
    have H2 := Term_TypeChecking.tcApp H1 ht‚ÇÇ
    exact Term_TypeChecking.tcApp H2 ht‚ÇÉ

-- Conversion 3 preserves types - (((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ)) ‚ñπ (t‚ÇÇ¬∑t‚ÇÅ)
example (œÉ œÑ : FType) (t‚ÇÅ t‚ÇÇ : Term)
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ œÉ)
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ (œÉ ‚ü∂ œÑ‚ãÜ))
    (hSing : Term_TypeChecking ùî∞‚ÇÅ (œÉ ‚ü∂ œÉ‚ãÜ))
    (hIUnion : Term_TypeChecking ind_‚ãÉ‚ÇÅ (œÉ‚ãÜ ‚ü∂ ((œÉ ‚ü∂ œÑ‚ãÜ) ‚ü∂ œÑ‚ãÜ))) : Term_TypeChecking ((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ) (œÑ‚ãÜ) :=
  by
    have H1 := Term_TypeChecking.tcApp hSing ht‚ÇÅ
    have H2 := Term_TypeChecking.tcApp hIUnion H1
    exact Term_TypeChecking.tcApp H2 ht‚ÇÇ

example (œÉ œÑ : FType) (t‚ÇÅ t‚ÇÇ : Term)
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ œÉ)
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ (œÉ ‚ü∂ (œÑ‚ãÜ))) : Term_TypeChecking (t‚ÇÇ¬∑t‚ÇÅ) (œÑ‚ãÜ) :=
  by
    exact Term_TypeChecking.tcApp ht‚ÇÇ ht‚ÇÅ

-- Conversion 4 preserves types - ((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ) ‚ñπ ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ))
example (œÉ œÑ : FType) (t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term)
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ (œÉ‚ãÜ))
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ (œÉ‚ãÜ))
    (ht‚ÇÉ : Term_TypeChecking t‚ÇÉ (œÉ ‚ü∂ œÑ‚ãÜ))
    (hBUnion : Term_TypeChecking ‚à™‚ÇÅ (œÉ‚ãÜ ‚ü∂ œÉ‚ãÜ ‚ü∂ œÉ‚ãÜ))
    (hIUnion : Term_TypeChecking ind_‚ãÉ‚ÇÅ (œÉ‚ãÜ ‚ü∂ ((œÉ ‚ü∂ œÑ‚ãÜ) ‚ü∂ œÑ‚ãÜ))) : Term_TypeChecking ((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ) (œÑ‚ãÜ) :=
  by
    have H1 := Term_TypeChecking.tcApp (Term_TypeChecking.tcApp hBUnion ht‚ÇÅ) ht‚ÇÇ
    exact Term_TypeChecking.tcApp (Term_TypeChecking.tcApp hIUnion H1) ht‚ÇÉ

example (œÉ œÑ : FType) (t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term)
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ (œÉ‚ãÜ))
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ (œÉ‚ãÜ))
    (ht‚ÇÉ : Term_TypeChecking t‚ÇÉ (œÉ ‚ü∂ œÑ‚ãÜ))
    (hBUnion : Term_TypeChecking ‚à™‚ÇÅ (œÑ‚ãÜ ‚ü∂ œÑ‚ãÜ ‚ü∂ œÑ‚ãÜ))
    (hIUnion : Term_TypeChecking ind_‚ãÉ‚ÇÅ (œÉ‚ãÜ ‚ü∂ ((œÉ ‚ü∂ œÑ‚ãÜ) ‚ü∂ œÑ‚ãÜ))) : Term_TypeChecking ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ)) (œÑ‚ãÜ) :=
  by
    have H1 := Term_TypeChecking.tcApp (Term_TypeChecking.tcApp hIUnion ht‚ÇÅ) ht‚ÇÉ
    have H2 := Term_TypeChecking.tcApp (Term_TypeChecking.tcApp hIUnion ht‚ÇÇ) ht‚ÇÉ
    exact Term_TypeChecking.tcApp (Term_TypeChecking.tcApp hBUnion H1) H2

/-
CINCO TENTATIVAS PARA CONVERSIONS PRESERVE TYPES

inductive Conv_TypeChecking : Term ‚Üí FType ‚Üí Prop                 -- Definir um Conv_TypeChecking?
| tcConv1
| tcConv2
| tcConv3
| tcConv4

lemma conv1_preserves_types (t t' : Term) (œÉ œÑ œÅ œÅ' : FType)
                            (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ œÉ)
                            (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ œÑ)
                            (hPi : Term_TypeChecking Œ†‚ÇÅ (œÉ ‚ü∂ œÑ ‚ü∂ œÉ))
                            (H : Term_TypeChecking ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) œÅ) :
    Term_TypeChecking t‚ÇÅ œÅ :=
by
  have H1 := Term_TypeChecking.tcApp hPi ht‚ÇÅ
  have H2 := Term_TypeChecking.tcApp H1 ht‚ÇÇ
  have H3 := ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)

lemma conv1_preserves_types :
  (t‚ÇÅ t‚ÇÇ : Term) (œÉ œÑ œÅ œÅ' : FType) (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ œÉ) (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ œÑ),
    Term_TypeChecking ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) œÅ ‚Üí
    Term_TypeChecking t‚ÇÅ œÅ' ‚Üí
    œÅ = œÅ' := by sorry

lemma conv_preserve_types :
  (t‚ÇÅ t‚ÇÇ : Term) (œÉ : FType),
    ConvertsTo t‚ÇÅ t‚ÇÇ ‚Üí
    Term_TypeChecking t‚ÇÅ œÉ ‚Üí
    Term_TypeChecking t‚ÇÇ œÑ ‚Üí
    œÉ = œÑ := by sorry
-/

--Auxiliary lemma: Every term has exactly one type TODO
lemma Type_Uniqueness {t : Term} {œÉ œÑ : FType} :
  Term_TypeChecking t œÉ ‚Üí
  Term_TypeChecking t œÑ ‚Üí
  œÉ = œÑ := by sorry
  /-                              -- Reuni√£o / se n√£o funcionar => induction no tipo ou termo
  intro tc1 tc2
  induction t                       -- Do livro da reuni√£o que sugere induction on the term
  . cases tc1
    cases tc2
    rfl
  . sorry                           -- Problema: dois Œ†'s diferentes n√£o t√™m de ter os mesmos tipos
  --  cases tc1
  --  cases tc2
  . sorry
  . sorry
  -/


-- Conversion 1 preserves types - ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) ‚ñπ t‚ÇÅ
lemma xx {œÉ œÑ : FType} {t‚ÇÅ t‚ÇÇ : Term}
    (ht‚ÇÅ : Term_TypeChecking t‚ÇÅ œÉ)
    (ht‚ÇÇ : Term_TypeChecking t‚ÇÇ œÑ)
    (hPi : Term_TypeChecking Œ†‚ÇÅ (œÉ ‚ü∂ œÑ ‚ü∂ œÉ)) : Term_TypeChecking ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) œÉ :=
  by
    have H := Term_TypeChecking.tcApp hPi ht‚ÇÅ
    exact Term_TypeChecking.tcApp H ht‚ÇÇ

-- ---------------
-- Inversion lemma      TODO: tentar fazer o global antes dos pequenos
-- ---------------

-- LEMMA: Inversion lemma       -- TODO: o livro
/-
lemma inv_lemma1 {t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term} {œÉ œÑ : FType} :
    (Term_TypeChecking ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) œÉ) ‚Üí
    (Term_TypeCheking (Œ†‚ÇÅ¬∑t‚ÇÅ) œÑ) ‚Üí
    ((Term_TypeCheking (t‚ÇÅ) œÉ) ‚àß (Term_TypeCheking t‚ÇÇ œÑ)) := by sorry
-/

lemma inv_lemma_app_right {t‚ÇÅ t‚ÇÇ : Term} {œÉ œÑ : FType} :        -- TO DO: does this look right?
    (Term_TypeChecking (t‚ÇÅ¬∑t‚ÇÇ) œÑ) ‚Üí
    (Term_TypeChecking t‚ÇÅ (œÉ‚ü∂œÑ)) ‚Üí
    (Term_TypeChecking t‚ÇÇ œÉ) := by
    intro h1 h2
    cases t‚ÇÇ with
    | lcons _ => sorry
    /- mien
        rename_i t
        cases œÉ
        have H := tcLcons t
        exact H
    -/
    | pi => sorry
    | sigma => sorry
    | sing => sorry
    | bUnion => sorry
    | iUnion => sorry
    | var _ => sorry
    | app _ _ => sorry


lemma inv_lemma_app_left {t‚ÇÅ t‚ÇÇ : Term} {œÉ œÑ : FType} :
    (Term_TypeChecking (t‚ÇÅ¬∑t‚ÇÇ) œÑ) ‚Üí
    (Term_TypeChecking t‚ÇÇ œÉ) ‚Üí
    (Term_TypeChecking t‚ÇÅ (œÉ‚ü∂œÑ)) := by sorry
    --intro h1 h2

lemma inv_lemma_pi {t‚ÇÅ t‚ÇÇ : Term} {œÉ œÑ : FType} :
    ((Term_TypeChecking ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) œÉ) ‚Üí ((Term_TypeChecking t‚ÇÅ œÉ) ‚àß (Term_TypeChecking t‚ÇÇ œÑ))) := by sorry

-- lemma inv_lemma_sigma

-- --------------------------
-- Conversions preserve types
-- --------------------------

-- LEMMA: Conversions preserve types
lemma conversions_preserve_types {t‚ÇÅ t‚ÇÇ : Term} {œÉ œÑ : FType} :     -- Para que cases seja para inductive def de conversions -> induction nessa hipotese
    ConvertsTo t‚ÇÅ t‚ÇÇ ‚Üí
    Term_TypeChecking t‚ÇÅ œÉ ‚Üí
    Term_TypeChecking t‚ÇÇ œÑ ‚Üí
    œÉ = œÑ := by
    intro ct tc1 tc2                              -- ct (ConvertsTo hypothesis), tc1 tc2 (Term_TypeChecking hypothesis)
    induction ct with                             -- induction on the hypothesis ConvertsTo
    | c1_pi t‚ÇÅ t‚ÇÇ => sorry
      /-
      cases tc1                                   -- Reuni√£o
      rename_i t‚ÇÉ t‚ÇÑ œÅ tc_t‚ÇÇ tc_pi
      have y := xx tc2 tc_t‚ÇÇ Term_TypeChecking.tcPi
      have H2 : t‚ÇÅ = conv ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) := by simp [conv]        -- usar isTrue aqui para depois poder rw? (thinking)
      rw [H2] at tc2
      -/

      -- fazer rewrite e depois usar Type_Uniqueness

        -- TODO: vers√£o manual different, here n√£o sabemos o tipo de t‚ÇÇ
        --2match tc1 with
        --2| tcApp _ _ (tcApp _ _ tcPi _) _ => rfl
        --2| _ => by_contra
        --let H : (conv (((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)) = t‚ÇÅ) := by simp [conv]
        --1 let H : ((conv ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)) = t‚ÇÅ) := by simp [conv]
        --1 in
        --1 match tc1, H with
        --let T := conv ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)
        --have H : (T = t‚ÇÅ) := by exact rfl
        --sorry
        --refine Type_Uniqueness _ œÉ œÑ ?c1_pi.a _
    | c2_sigma t‚ÇÅ t‚ÇÇ t‚ÇÉ => sorry
    | c3_indU t‚ÇÅ t‚ÇÇ => sorry
        --let H : ((ind_‚ãÉ‚ÇÅ¬∑ùî∞‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) ‚ñπ (t‚ÇÇ¬∑t‚ÇÅ) := by simp [conv]
        --in
        --match tc1, H with
        --| Term_TypeChecking.tcApp _ _ (Term_TypeChecking.tcApp _ _ Term_TypeChecking.tcIUnion _), _ =>
      -- Using type-checking information
        --have : œÉ = œÑ :=
        --match tc2 with
      --| _ => rfl
      --exact this
    | c4_indU_binU t‚ÇÅ t‚ÇÇ t‚ÇÉ => sorry

inductive ReducesTo : Term ‚Üí Term ‚Üí Prop
| reflex (t) : ReducesTo t t                                                -- A term reduces to itself
| app_left {t‚ÇÅ t‚ÇÇ t‚ÇÅ'} : ReducesTo t‚ÇÅ t‚ÇÅ' ‚Üí ReducesTo (t‚ÇÅ¬∑t‚ÇÇ) (t‚ÇÅ'¬∑t‚ÇÇ)      -- Reduction in the left subterm of an application
| app_right {t‚ÇÅ t‚ÇÇ t‚ÇÇ'} : ReducesTo t‚ÇÇ t‚ÇÇ' ‚Üí ReducesTo (t‚ÇÅ¬∑t‚ÇÇ) (t‚ÇÅ¬∑t‚ÇÇ')     -- Reduction in the right subterm of an application
| one_step {t‚ÇÅ t‚ÇÇ} : ConvertsTo t‚ÇÅ t‚ÇÇ ‚Üí ReducesTo t‚ÇÅ t‚ÇÇ
| n_step {t‚ÇÅ t‚ÇÇ t‚ÇÉ} : ReducesTo t‚ÇÅ t‚ÇÇ ‚Üí ReducesTo t‚ÇÇ t‚ÇÉ ‚Üí ReducesTo t‚ÇÅ t‚ÇÉ   -- Transitivity to represent n-step reductions

open ReducesTo

-- Example: Conversions are one-step reductions (example with C1 conversion)
example (t‚ÇÅ t‚ÇÇ : Term) : ReducesTo ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) t‚ÇÅ :=
  by
    have H1 := ConvertsTo.c1_pi t‚ÇÅ t‚ÇÇ
    exact ReducesTo.one_step H1


--def ReducesTo_check (t‚ÇÅ t‚ÇÇ : Term): Bool := if ((ReducesTo t‚ÇÅ t‚ÇÇ) = true) then true else false

-- TODO: isRedex, isReduct, isReducible (definition 1.15, p.27)

/- TODO: Normalizar at√© n√£o funcionar mais -> TODO yes: precisa de decreasing?
def normalize (t : Term) : Term :=
  let t' := conv t
  if t = t' then t
  else normalize t'
-/


-- ---------------------------------------------
-- REMARK 1.23 (p.28): Reductions preserve types
-- ---------------------------------------------

-- LEMMA: Reductions preserve types
lemma reductions_preserve_types {t‚ÇÅ t‚ÇÇ : Term} {œÉ œÑ : FType} :     -- TODO now: yes: problema -> o cases devia ser para inductive def de conversions
    ReducesTo t‚ÇÅ t‚ÇÇ ‚Üí
    Term_TypeChecking t‚ÇÅ œÉ ‚Üí
    Term_TypeChecking t‚ÇÇ œÑ ‚Üí
    œÉ = œÑ := by
    intro red_t tc1 tc2
    induction red_t with
    | reflex t => exact Type_Uniqueness tc1 tc2
    | app_left rd tc => sorry
    | app_right rd tc => sorry
    | one_step h_ct => exact (conversions_preserve_types h_ct tc1 tc2)       -- TODO: como rename as metavariables com as cruzes?
    | n_step h_red_t1t2 h_red_t2t3 h_type_un_t1t2 h_type_un_t2t3 => sorry     -- Looking good, keep on doing this
        --have h_red_t1t3 := ReducesTo.n_step h_red_t1t2 h_red_t2t3
        --have H := h_type_un_t1t2 tc1


-- ----------------------------------------------
-- DEFINITION 1.16 (p.28): "Reduction sequences"
-- ----------------------------------------------

inductive steps_into : ‚Ñï ‚Üí Term ‚Üí Term ‚Üí Prop
| single : steps_into 1 t (conv t)
| multiple : steps_into n t‚ÇÅ t‚ÇÇ ‚Üí steps_into m t‚ÇÇ t‚ÇÉ ‚Üí steps_into (n+m) t‚ÇÅ t‚ÇÉ

/-
-- TO DO: pq n√£o funciona? Termination & Decreasing?      IGNORE
def count_steps : Term ‚Üí Term ‚Üí ‚Ñï
| t‚ÇÅ, t‚ÇÇ => if t‚ÇÅ = t‚ÇÇ then 0
           else (1 + (count_steps (conv t‚ÇÅ) t‚ÇÇ))
-/


-- ------------------------------------------
-- EXAMPLE 1.10 (p.28): Example of reductions
-- ------------------------------------------

lemma Ex1_10_1 (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) : ReducesTo ((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑((Œ†‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ)) ((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) :=
by
  have H1 := ConvertsTo.c1_pi t‚ÇÇ t‚ÇÉ
  have H2 := ReducesTo.one_step H1
  exact @ReducesTo.app_right (Œ£‚ÇÅ¬∑t‚ÇÅ) ((Œ†‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ) t‚ÇÇ H2               -- @ permite inserir os argumentos impl√≠citos

lemma Ex1_10_2 (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) : ReducesTo (((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ)¬∑t‚ÇÉ) ((t‚ÇÇ¬∑t‚ÇÅ)¬∑t‚ÇÉ) :=
by
  have H1 := ConvertsTo.c3_indU t‚ÇÅ t‚ÇÇ
  have H2 := ReducesTo.one_step H1
  exact @ReducesTo.app_left ((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ) t‚ÇÉ (t‚ÇÇ¬∑t‚ÇÅ) H2

lemma Ex1_10_3 (t q r : Term) : ReducesTo ((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t))¬∑q))¬∑r) ((‚à™‚ÇÅ¬∑(r¬∑t))¬∑((ind_‚ãÉ‚ÇÅ¬∑q)¬∑r)) :=
by
  have H1 := ConvertsTo.c4_indU_binU (ùî∞‚ÇÅ¬∑t) q r
  have H2 := ReducesTo.one_step H1
  have H3 := ConvertsTo.c3_indU t r
  have H4 := ReducesTo.one_step H3
  have H5 := @ReducesTo.app_right ‚à™‚ÇÅ ((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t))¬∑r) (r¬∑t) H4
  have H6 := @ReducesTo.app_left (‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t))¬∑r)) ((ind_‚ãÉ‚ÇÅ¬∑q)¬∑r) (‚à™‚ÇÅ¬∑(r¬∑t)) H5
  exact ReducesTo.n_step H2 H6

-- ----------------------------------------------------------------------
-- EXAMPLE 1.11 (p.29): Example of different possible reduction sequences
-- ----------------------------------------------------------------------

lemma Ex1_11_Seq1 (r q t s : Term) : ReducesTo (((Œ£‚ÇÅ¬∑r)¬∑((Œ†‚ÇÅ¬∑q)¬∑t))¬∑s) ((r¬∑s)¬∑(q¬∑s)) :=
by
  have H1 := ConvertsTo.c1_pi q t
  have H2 := ReducesTo.one_step H1
  have H3 := ConvertsTo.c2_sigma r q s
  have H4 := ReducesTo.one_step H3
  have H5 := @ReducesTo.app_right (Œ£‚ÇÅ¬∑r) ((Œ†‚ÇÅ¬∑q)¬∑t) q H2
  have H6 := @ReducesTo.app_left ((Œ£‚ÇÅ¬∑r)¬∑((Œ†‚ÇÅ¬∑q)¬∑t)) s ((Œ£‚ÇÅ¬∑r)¬∑q) H5
  exact ReducesTo.n_step H6 H4

lemma Ex1_11_Seq2 (r q t s : Term) : ReducesTo (((Œ£‚ÇÅ¬∑r)¬∑((Œ†‚ÇÅ¬∑q)¬∑t))¬∑s) ((r¬∑s)¬∑(q¬∑s)) :=
by
  have H1 := ConvertsTo.c2_sigma r ((Œ†‚ÇÅ¬∑q)¬∑t) s
  have H2 := ReducesTo.one_step H1
  have H3 := ConvertsTo.c1_pi q t
  have H4 := ReducesTo.one_step H3
  have H5 := @ReducesTo.app_left ((Œ†‚ÇÅ¬∑q)¬∑t) s q H4
  have H6 := @ReducesTo.app_right (r¬∑s) (((Œ†‚ÇÅ¬∑q)¬∑t)¬∑s) (q¬∑s) H5
  exact ReducesTo.n_step H2 H6



-- ---------------------
-- Normal form of a term
-- ---------------------

-- DEFINITION: checks whether a term is in normal form
def isNormal : Term ‚Üí Prop
| t => (conv t = t)                                         -- TODO not now: isto assim n√£o deixa converter subterms
                                                            -- a tirar

@[simp]
def isNormal2 (t:Term): Prop := ‚àÄ t', ReducesTo t t' ‚Üí t = t'

-- DEFINITION: checks whether a term is in normal form
def isNormal_check : Term ‚Üí Bool                            -- a tirar, vai ter de ser Prop e n√£o Bool
| t => if conv t = t then true else false

-- DEFINITION: normal form of a term
def normal_form (t : Term) : Term :=
if (isNormal_check t) = true then t else conv t

-- Ex1_10_1: ((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑((Œ†‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ)) reduces to ((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)
def example_term_Ex1_10_1_A := ((Œ£‚ÇÅ¬∑(var "t‚ÇÅ"))¬∑((Œ†‚ÇÅ¬∑(var "t‚ÇÇ"))¬∑(var "t‚ÇÉ")))
def example_term_Ex1_10_1_B := ((Œ£‚ÇÅ¬∑(var "t‚ÇÅ"))¬∑(var "t‚ÇÇ"))

#eval example_term_Ex1_10_1_A
#eval conv example_term_Ex1_10_1_A

#eval isNormal_check example_term_Ex1_10_1_A              -- TODO: not working, diz que √© Normal mas n√£o √©
#eval isNormal_check example_term_Ex1_10_1_B

/-
example : isNormal2 example_term_Ex1_10_1_B := by         -- TODO (future); might need additional lemmas
  unfold example_term_Ex1_10_1_B
  unfold isNormal2
  intro x rt
  cases rt with
  | reflex t => exact rfl
  | app_left _ => sorry
  | app_right _ => sorry
  | one_step h => cases h
  | n_step h1 h2 => cases h1 <;> cases h2 <;> simp <;> rfl
                    . rename_i a b                        -- . para ir s√≥ para o primeiro goal
                      cases b with
                      | reflex t => sorry
                      | app_left _ => sorry
                      | app_right _ => sorry
                      | one_step _ => sorry
                      | n_step _ _ => sorry
-/

  --cases x <;> cases rt    -> fazer todos os goals

-- Example: using Ex1_11_Seq2 to see that ((Œ£‚ÇÅ¬∑r)¬∑((Œ†‚ÇÅ¬∑q)¬∑t))¬∑s is not normal, while (r¬∑s)¬∑(q¬∑s) is
--          we will consider the terms to be variables (using the above term names for the strings).

def example_term_Ex1_11_Seq2_A := (((Œ£‚ÇÅ¬∑(var "r"))¬∑((Œ†‚ÇÅ¬∑(var "q"))¬∑(var "t")))¬∑(var "s"))
def example_term_Ex1_11_Seq2_B := (((var "r")¬∑(var "s"))¬∑((var "q")¬∑(var "s")))

#eval isNormal_check example_term_Ex1_11_Seq2_A           -- Output is false since ((Œ£‚ÇÅ¬∑r)¬∑((Œ†‚ÇÅ¬∑q)¬∑t))¬∑s is not normal
#eval isNormal_check example_term_Ex1_11_Seq2_B           -- Output is true since (r¬∑s)¬∑(q¬∑s) is not normal

#eval normal_form example_term_Ex1_11_Seq2_A              -- TODO: not working -> problem with subterms?


-- TODO: isNormalizable, isStronglyNormalizable
-- TODO yes: How to define finite reduction sequences and strongly normalizable? (def 1.17, p.30)
        -- Use ‚àÉn natural e stepsinto

-- TODO yes: Lemas e teoremas sem demo na disserta√ß√£o (p.32/33)
--        Newman's lemma, SN property, CR property -> how to avoid aviso? don't avoid it, leave sorry




-- ---------------------------------------------------------------------------------------------------------------
--             SECTION 1.2.6: Characterization of closed normal terms
-- ---------------------------------------------------------------------------------------------------------------

-- ---------------------------------------------------------
-- REMARK 1.30 (p.32):
-- General form of closed terms -> fazer cases on constants?
-- ---------------------------------------------------------


-- ---------------------------------------------------------
-- REMARK 1.31 (p.33):
-- General form of closed normal terms -> fazer cases on constants?
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- PROPOSITION 1.3 (p.33): Ground normal form
-- ---------------------------------------------------------

-- TO DO: Falta dizer que √© ground
lemma GroundNormalForm (t : Term) (tL : LTerm) (h1 : t.isClosedTerm) (h2 : isNormal t) : (t = Term.lcons tL) :=
  by sorry

-- ---------------------------------------------------------
-- DEFINITION 1.19 (p.36):
-- set-like terms   --> needs isSetLike
-- ---------------------------------------------------------



-- Problema: how to define isSetLike?
/-
def isSetLike (t : Term) : Prop := isSing ‚à® isbUnion ‚à® both
-/

def Term.isPartialSetLike : Term ‚Üí Prop
| .lcons _
| pi                                 -- combinators:     Œ†
| sigma => false                               --                  Œ£
| sing                                   -- star constants:  ùî∞
| bUnion => true                                --                  ‚à™ (binary union)
| iUnion                                 --                  ‚à™ (indexed union)
| var _ => false                -- variables
| app a b => (a.isPartialSetLike) ‚à® (b.isPartialSetLike)

def Term.isSetLike (t:Term) (œÉ:FType): Prop := t.isPartialSetLike ‚àß (Term_TypeChecking t (œÉ‚ãÜ))



-- (h : a.isSetLike) Reuni√£o: precisa de typechecking


-- ---------------------------------------------------------
-- EXAMPLE 1.14 (p.36)
-- ---------------------------------------------------------

/-
TO DO: precisa de isSetLike_check com True/False
-/

def ex1_14_term1 (t : Term) := ùî∞‚ÇÅ¬∑t                             -- true
def ex1_14_term2 (r‚ÇÅ r‚ÇÇ : Term) := ((‚à™‚ÇÅ¬∑r‚ÇÅ)¬∑(ùî∞‚ÇÅ¬∑r‚ÇÇ))            -- true
def ex1_14_term3 (p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ : Term) := (‚à™‚ÇÅ¬∑(p‚ÇÅ¬∑p‚ÇÇ))¬∑(q‚ÇÅ¬∑q‚ÇÇ)   -- true
def ex1_14_term4 (u‚ÇÅ u‚ÇÇ : Term) := ùî∞‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑u‚ÇÅ)¬∑u‚ÇÇ)          -- true
def ex1_14_term5 (u‚ÇÅ u‚ÇÇ : Term) := ((ind_‚ãÉ‚ÇÅ¬∑u‚ÇÅ)¬∑u‚ÇÇ)             -- false


-- ---------------------------------------------------------
-- PROPOSITION 1.4 (p.36):
-- Star normal form
-- ---------------------------------------------------------

/- TO DO: falta definir isSetLike
lemma StarNormalForm
  (œÉ:FType) (t:Term)
  (h1 : t.isClosedTerm) (h2 : isNormal t) (h3 : Term_TypeChecking t œÉ‚ãÜ) :
  (t : isSetLike) := by sorry
-/


-- ---------------------------------------------------------
-- REMARK 1.31 (p.37):
-- Structure of closed normal terms
-- ---------------------------------------------------------

-- ORA ESTA FICA PARA O FIM







-- ---------------------------------------------------------------------------------------------------------------
--                          "PRENEXIFICATION RULES"
-- ---------------------------------------------------------------------------------------------------------------

-- PRENEXIFICATION RULES
-- Definir novo inductive para termos as usual prenexification rules?
-- ou usar um isFormula?

-- FREE VARIABLES NOT WORKING :'(
-- TODO: prenexifica√ß√£o para LFormula

-- TODO: usar numero minimo de prenex rules e o resto def as lemmas com a boa nota√ß√£o

def prenex : Formula ‚Üí Formula
| .not (Formula.unbForall x A)  => Formula.unbForall x (prenex (Formula.not A))
| .not (Formula.bForall x t A)  => Formula.bForall x t (prenex (Formula.not A))
| Formula.or (Formula.unbForall x A) B => Formula.unbForall x (prenex (Formula.or A B))
| Formula.or (Formula.bForall x t A) B => Formula.bForall x t (prenex (Formula.or A B))
| Formula.or A (Formula.unbForall x B) => Formula.unbForall x (prenex (Formula.or A B))
| Formula.or A (Formula.bForall x t B) => Formula.bForall x t (prenex (Formula.or A B))
| Formula.unbForall x A => Formula.unbForall x (prenex A)
| Formula.bForall x t A => Formula.bForall x t (prenex A)
| Formula.rel r l_term => Formula.rel r l_term
| Formula.eq t‚ÇÅ t‚ÇÇ => Formula.eq t‚ÇÅ t‚ÇÇ
| Formula.mem t‚ÇÅ t‚ÇÇ => Formula.mem t‚ÇÅ t‚ÇÇ
| Formula.not A => Formula.not (prenex A)
| Formula.or A B => Formula.or (prenex A) (prenex B)
| x => x

/- LOOKING GOOD, but falar de freevars?

lemma DM1 (A B : Formula) : (¬¨‚ÇÅ(A‚à®‚ÇÅB)) = ((¬¨‚ÇÅA)‚àß‚ÇÅ(¬¨‚ÇÅB)) := by sorry

lemma DM2 (A B : Formula) : (¬¨‚ÇÅ(A‚àß‚ÇÅB)) = ((¬¨‚ÇÅA)‚à®‚ÇÅ(¬¨‚ÇÅB)) := by sorry

-----------

lemma Prenex1 (x y : String) (A : Formula) : (E‚ÇÅ x (E‚ÇÅ y A)) = (E‚ÇÅ y (E‚ÇÅ x A)) := by sorry

lemma Prenex2 (x y : String) (t : Term) (A : Formula) : (bE‚ÇÅ x t (E‚ÇÅ y A)) = (E‚ÇÅ y (bE‚ÇÅ x t A)) := by sorry

lemma Prenex3 (x y : String) (q : Term) (A : Formula) : (E‚ÇÅ x (bE‚ÇÅ y q A)) = (bE‚ÇÅ y q (E‚ÇÅ x A)) := by sorry

lemma Prenex4 (x y : String) (t q : Term) (A : Formula) : (E‚ÇÅ x (bE‚ÇÅ y q A)) = (bE‚ÇÅ y q (E‚ÇÅ x A)) := by sorry

lemma Prenex5 (x y : String) (t q : Term) (A : Formula) : (bE‚ÇÅ x t (bE‚ÇÅ y q A)) = (bE‚ÇÅ y q (bE‚ÇÅ x t A)) := by sorry

-----------

lemma BiPrenex1 (x : String) (A B : Formula) (x ‚àà A.freevars) (x ‚àà B.freevars) :
    ((E‚ÇÅ x A) ‚à®‚ÇÅ (E‚ÇÅ x B)) = (E‚ÇÅ x (A ‚à®‚ÇÅ B)) := by sorry

lemma BiPrenex2 (x : String) (t : Term) (A B : Formula) (x ‚àà A.freevars) (x ‚àà B.freevars) :
    ((E‚ÇÅ x t A) ‚à®‚ÇÅ (E‚ÇÅ x t B)) = (E‚ÇÅ x t (A ‚à®‚ÇÅ B)) := by sorry

lemma BiPrenex3 (x : String) (A B : Formula) (x ‚àà A.freevars) (x ‚àà B.freevars) :
    ((E‚ÇÅ x A) ‚àß‚ÇÅ (E‚ÇÅ x B)) = (E‚ÇÅ x (A ‚àß‚ÇÅ B)) := by sorry

lemma BiPrenex4 (x : String) (t : Term) (A B : Formula) (x ‚àà A.freevars) (x ‚àà B.freevars) :
    ((bE‚ÇÅ x t A) ‚àß‚ÇÅ (bE‚ÇÅ x t B)) = (bE‚ÇÅ x t (A ‚àß‚ÇÅ B)) := by sorry

lemma BiPrenex5 (x : String) (A B : Formula) (x ‚àà A.freevars) (x ‚àà B.freevars) :
    ((V‚ÇÅ x A) ‚àß‚ÇÅ (V‚ÇÅ x B)) = (V‚ÇÅ x (A ‚àß‚ÇÅ B)) := by sorry

lemma BiPrenex6 (x : String) (t : Term) (A B : Formula) (x ‚àà A.freevars) (x ‚àà B.freevars) :
    ((bV‚ÇÅ x t A) ‚àß‚ÇÅ (bV‚ÇÅ x t B)) = (bV‚ÇÅ x t (A ‚àß‚ÇÅ B)) := by sorry

-----------

lemma ThricePrenex1 (x y : String) (A B : Formula)
    (x ‚àà A.freevars) (x ‚àâ B.freevars)
    (x ‚àâ A.freevars) (x ‚àà B.freevars):
    ((V‚ÇÅ x A) ‚àß‚ÇÅ (V‚ÇÅ y B)) = (V‚ÇÅ x (V‚ÇÅ y (A ‚àß‚ÇÅ B))) := by sorry

lemma ThricePrenex2 (x y : String) (t q : Term) (A B : Formula)
    (x ‚àà A.freevars) (x ‚àâ B.freevars)
    (y ‚àâ A.freevars) (y ‚àà B.freevars):
    ((bV‚ÇÅ x t A) ‚àß‚ÇÅ (bV‚ÇÅ y q B)) = (bV‚ÇÅ x t (bV‚ÇÅ y q (A ‚àß‚ÇÅ B))) := by sorry

----------

lemma HalfPrenex1 (x : String) (A B : Formula) (x ‚àà A.freevars) (x ‚àâ B.freevars):                 -- TODO: vers√£o com ‚à®‚ÇÅ para def
    ((V‚ÇÅ x A) ‚àß‚ÇÅ B) = (V‚ÇÅ x (A ‚àß‚ÇÅ B)) := by sorry

lemma HalfPrenex1 (x : String) (t : Term) (A B : Formula) (x ‚àà A.freevars) (x ‚àâ B.freevars):      -- TODO: vers√£o com ‚à®‚ÇÅ para def
    ((bV‚ÇÅ x t A) ‚àß‚ÇÅ B) = (bV‚ÇÅ x t (A ‚àß‚ÇÅ B)) := by sorry

lemma HalfPrenex3 (x : String) (A B : Formula) (x ‚àà A.freevars) (x ‚àâ B.freevars):
    ((E‚ÇÅ x A) ‚àß‚ÇÅ B) = (E‚ÇÅ x (A ‚àß‚ÇÅ B)) := by sorry

lemma HalfPrenex4 (x : String) (t : Term) (A B : Formula) (x ‚àà A.freevars) (x ‚àâ B.freevars):
    ((bE‚ÇÅ x t A) ‚àß‚ÇÅ B) = (bE‚ÇÅ x t (A ‚àß‚ÇÅ B)) := by sorry

lemma HalfPrenex5 (x : String) (A B : Formula) (x ‚àà A.freevars) (x ‚àâ B.freevars):
    ((E‚ÇÅ x A) ‚à®‚ÇÅ B) = (E‚ÇÅ x (A ‚à®‚ÇÅ B)) := by sorry

lemma HalfPrenex6 (x : String) (t : Term) (A B : Formula) (x ‚àà A.freevars) (x ‚àâ B.freevars):
    ((bE‚ÇÅ x t A) ‚à®‚ÇÅ B) = (bE‚ÇÅ x t (A ‚à®‚ÇÅ B)) := by sorry

TODO: what is missing?

-/



-- Problema
/- TODO (14 ag) : Prenexification rules as axioms (keeps def and prim symbols)? Or as lemmas (does not keep)?
axiom L_DM_or (A B : LFormula) : (¬¨‚ÇÄ(A‚à®‚ÇÄB)) = ((¬¨‚ÇÄA)‚àß‚ÇÄ(¬¨‚ÇÄB))
lemma L_DM_or (A B : LFormula) : (¬¨‚ÇÄ(A‚à®‚ÇÄB)) = ((¬¨‚ÇÄA)‚àß‚ÇÄ(¬¨‚ÇÄB)) := by sorry
-/

-- DeMorgan laws
axiom prenex_DM_or (A B : Formula) :
      (¬¨‚ÇÅ(A‚à®‚ÇÅB)) = ((¬¨‚ÇÅA)‚àß‚ÇÅ(¬¨‚ÇÅB))
axiom prenex_DM_and (A B : Formula) :
      (¬¨‚ÇÅ(A‚àß‚ÇÅB)) = ((¬¨‚ÇÅA)‚à®‚ÇÅ(¬¨‚ÇÅB))

-- Negation
axiom prenex_neg_exists (A : Formula) (x : String) :
      (¬¨‚ÇÅ(E‚ÇÅ x A)) = (V‚ÇÅ x (¬¨‚ÇÅA))
axiom prenex_neg_forall (A : Formula) (x : String) :
      (¬¨‚ÇÅ(V‚ÇÅ x A)) = (E‚ÇÅ x (¬¨‚ÇÅA))

-- Conjunction
axiom prenex_forall_and (A B : Formula) (x : String) (hA : x ‚àà A.freevars) (hB : x ‚àâ B.freevars) :
      ((V‚ÇÅ x A)‚àß‚ÇÅB) = (V‚ÇÅ x (A‚àß‚ÇÅB))
axiom prenex_exists_and (A B : Formula) (x : String) (hA : x ‚àà A.freevars) (hB : x ‚àâ B.freevars) :
      ((E‚ÇÅ x A)‚àß‚ÇÅB) = (E‚ÇÅ x (A‚àß‚ÇÅB))

-- "Forall unite" (conj and disj)
axiom prenex_forall_or_un (A B : Formula) (x : String) :
      ((V‚ÇÅ x A)‚à®‚ÇÅ(V‚ÇÅ x B)) = (V‚ÇÅ x (A‚à®‚ÇÅB))
axiom prenex_forall_and_un (A B : Formula) (x : String) :
      ((V‚ÇÅ x A)‚àß‚ÇÅ(V‚ÇÅ x B)) = (V‚ÇÅ x (A‚àß‚ÇÅB))

-- "Exists unite" (conj and disj)
axiom prenex_exists_or_un (A B : Formula) (x : String) :
      ((E‚ÇÅ x A)‚à®‚ÇÅ(E‚ÇÅ x B)) = (E‚ÇÅ x (A‚à®‚ÇÅB))
axiom prenex_exists_and_un (A B : Formula) (x : String) :
      ((E‚ÇÅ x A)‚àß‚ÇÅ(E‚ÇÅ x B)) = (E‚ÇÅ x (A‚àß‚ÇÅB))

-- "Forall commutativity" (unbounded and bounded)
axiom prenex_unbforall_comm (A B : Formula) (x y : String) :
      (V‚ÇÅ x (V‚ÇÅ y A)) = (V‚ÇÅ y (V‚ÇÅ x A))
axiom prenex_bforall_comm (A B : Formula) (x y : String) (t q : Term) :
      (bV‚ÇÅ x t (bV‚ÇÅ y q A)) = (bV‚ÇÅ y q (bV‚ÇÅ x t A))

-- "Exists commutativity" (unbounded and bounded)
axiom prenex_unbexists_comm (A B : Formula) (x y : String) :
      (E‚ÇÅ x (E‚ÇÅ y A)) = (E‚ÇÅ y (E‚ÇÅ x A))
axiom prenex_bexists_comm (A B : Formula) (x y : String) (t q : Term) :
      (bE‚ÇÅ x t (bE‚ÇÅ y q A)) = (bE‚ÇÅ y q (bE‚ÇÅ x t A))

-- "Exists and forall comm" (unbounded and bounded)

-- "Bounded and unbounded forall comm"
axiom prenex_b_unb_forall_comm (A B : Formula) (x y : String) (t : Term) :
      (bV‚ÇÅ x t (V‚ÇÅ y A)) = (V‚ÇÅ y (bV‚ÇÅ x t A))

-- "Bounded and unbounded exists comm"
axiom prenex_b_unb_exists_comm (A B : Formula) (x y : String) (t : Term) :
      (bE‚ÇÅ x t (E‚ÇÅ y A)) = (E‚ÇÅ y (bE‚ÇÅ x t A))


-- Disjunction
axiom prenex_forall_or (A B : Formula) (x : String) (hA : x ‚àà A.freevars) (hB : x ‚àâ B.freevars) :
      ((V‚ÇÅ x A)‚à®‚ÇÅB) = (V‚ÇÅ x (A‚à®‚ÇÅB))
axiom prenex_exists_or (A B : Formula) (x : String) (hA : x ‚àà A.freevars) (hB : x ‚àâ B.freevars) :
      ((E‚ÇÅ x A)‚à®‚ÇÅB) = (E‚ÇÅ x (A‚à®‚ÇÅB))

-- Implication
axiom prenex_forall_imp (A B : Formula) (x : String):
      ((V‚ÇÅ x A)‚Üí‚ÇÅB) = (E‚ÇÅ x (A‚Üí‚ÇÅB))     -- TODO (14 ag) : (x ‚àà (Lfreevars_formula A)) (x ‚àâ Lfreevars_formula B)
axiom prenex_exists_imp (A B : Formula) (x : String) :
      ((E‚ÇÅ x A)‚Üí‚ÇÅB) = (V‚ÇÅ x (A‚Üí‚ÇÅB))    -- TODO (14 ag) : (x ‚àà (Lfreevars_formula A)) (x ‚àâ Lfreevars_formula B)

axiom prenex_imp_forall (A B : Formula) (x : String):
      (A‚Üí‚ÇÅ(V‚ÇÅ x B)) = (V‚ÇÅ x (A‚Üí‚ÇÅB))     -- TODO (14 ag) : (x ‚àà (Lfreevars_formula A)) (x ‚àâ Lfreevars_formula B)
axiom prenex_imp_exists (A B : Formula) (x : String) :
      (A‚Üí‚ÇÅ(V‚ÇÅ x B)) = (E‚ÇÅ x (A‚Üí‚ÇÅB))    -- TODO (14 ag) : (x ‚àà (Lfreevars_formula A)) (x ‚àâ Lfreevars_formula B)




-- ------------------

-- Conjunction commutativity
axiom and_commut (A B : Formula) : (A‚àß‚ÇÅB) = (B‚àß‚ÇÅA)

-- Disjunction commutativity
axiom or_commut (A B : Formula) : (A‚à®‚ÇÅB) = (B‚à®‚ÇÅA)

-- ------------------

-- Double neg
axiom double_neg (A : Formula) : (¬¨‚ÇÅ(¬¨‚ÇÅA)) = A


-- AGORA: 0. Which ones need the assumption of in and notin freevars?
--        1. acrescentar as assumptions que em StarLang devem funcionar
--        2. acabar as prenex rules aqui (falta os bounded chanesses pelo menos )









/-
t‚ÇÅ,...,t‚Çô
‚àÉt‚ààlt

-/



end StarLang
