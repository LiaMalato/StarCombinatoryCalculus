-- -------------------------------------------------------------
--            Star Language (atualizada)
-- -------------------------------------------------------------

-- We import the definitions from the first-order language L:
import LeanProjeto2.FOL
import MathLib.Tactic

namespace StarLang

-- Finite types [def 1.1]
inductive FType : Type
| ground : FType                        -- G
| arrow : FType ‚Üí FType ‚Üí FType         -- œÉ ‚Üí œÑ
| star : FType ‚Üí FType                  -- œÉ*

open FType

-- Notation for finite types
def G := ground                         -- notation G => ground
notation t "‚ü∂" t1 => arrow t t1
notation t "‚ãÜ" => star t

-- ----------------------------
-- TERMS and CONSTANTS (p.9-12)
-- ----------------------------

-- def Sym : Type := String deriving BEq, DecidableEq, Repr

-- DEFINITION 1.2 (p.8-9): Terms of L^{omega}_*
inductive Term --where
| lcons : LTerm ‚Üí Term                  -- L-constants
| pi                                    -- combinators:     Œ†
| sigma                                 --                  Œ£
| sing                                  -- star constants:  ùî∞
| bUnion                                --                  ‚à™ (binary union)
| iUnion                                --                  ‚à™ (indexed union)
| var : String ‚Üí Term                   -- variables
| app : Term ‚Üí Term ‚Üí Term              -- application of terms
--deriving Repr                                                                     -- D√Å ERRO

-- NOTATION: Notation for combinators and star constants
notation "Œ†‚ÇÅ" => Term.pi
notation "Œ£‚ÇÅ" => Term.sigma
notation "ùî∞‚ÇÅ" => Term.sing
notation "‚à™‚ÇÅ" => Term.bUnion
notation "ind_‚ãÉ‚ÇÅ" => Term.iUnion
notation t‚ÇÅ "¬∑" t‚ÇÇ => Term.app t‚ÇÅ t‚ÇÇ

open Term

-- ------------------------------------------------------
-- TYPECHECKING THE TERMS OF L^{omega}_*
-- We typecheck the components of the formulas of L^œâ_*.
-- This guarantees that the formulas have admissible types.
-- ------------------------------------------------------

inductive Term_TypeChecking : Term ‚Üí FType ‚Üí Prop
| tcLcons (t : LTerm) : Term_TypeChecking (lcons t) G                                                           -- L-constants have type G
| tcPi {œÉ œÑ} : Term_TypeChecking pi (œÉ ‚ü∂ (œÑ ‚ü∂ œÉ))                                                             -- Œ†_{œÉ,œÑ} : œÉ ‚ü∂ (œÑ ‚ü∂ œÉ)
| tcSigma {œÉ œÑ œÅ}: Term_TypeChecking sigma ((œÉ ‚ü∂ (œÑ ‚ü∂ œÅ)) ‚ü∂ ((œÉ ‚ü∂ œÑ) ‚ü∂ (œÉ ‚ü∂ œÅ)))                           -- Œ£_{œÉ,œÑ,œÅ} : (œÉ ‚ü∂ (œÑ ‚ü∂ œÅ)) ‚ü∂ ((œÉ ‚ü∂ œÑ) ‚ü∂ (œÉ ‚ü∂ œÅ))
| tcSing {œÉ}: Term_TypeChecking sing (œÉ ‚ü∂ œÉ‚ãÜ)                                                                  -- ùî∞_{œÉ} : œÉ‚ãÜ
| tcBUnion {œÉ}: Term_TypeChecking bUnion (œÉ‚ãÜ ‚ü∂ (œÉ‚ãÜ ‚ü∂ œÉ‚ãÜ))                                                      -- ‚à™_{œÉ} : œÉ‚ãÜ ‚ü∂ (œÉ‚ãÜ ‚ü∂ œÉ‚ãÜ)
| tcIUnion {œÉ œÑ} : Term_TypeChecking iUnion (œÉ‚ãÜ ‚ü∂ ((œÉ ‚ü∂ œÑ‚ãÜ) ‚ü∂ œÑ‚ãÜ))                                            -- ‚à™_{œÉ} : œÉ‚ãÜ ‚ü∂ ((œÉ ‚ü∂ œÑ‚ãÜ) ‚ü∂ œÑ‚ãÜ)
| tcVar {x œÉ}: Term_TypeChecking (var x) œÉ                                                                       -- Variables x : œÉ
| tcApp {t‚ÇÅ t‚ÇÇ œÉ œÑ}: Term_TypeChecking t‚ÇÅ (œÉ ‚ü∂ œÑ) ‚Üí Term_TypeChecking t‚ÇÇ œÉ ‚Üí Term_TypeChecking (app t‚ÇÅ t‚ÇÇ) œÑ    -- If t‚ÇÅ : (œÉ ‚ü∂ œÑ) and t‚ÇÇ : œÉ, then t‚ÇÅt‚ÇÇ : œÑ

open Term_TypeChecking


-- ------------------
-- FORMULAS (p.12-14)
-- ------------------

/-
We define the formulas of L^œâ_*:
  a) The atomic formulas (definition 1.6 - p.11)
  b) The base formulas (definition 1.10 - p.14)
  c) The formulas (definition 1.7 - p.13)
-/

inductive Formula
| L_Form : LFormula ‚Üí Formula
| rel : string ‚Üí List Term ‚Üí Formula                                -- R(t‚ÇÅ, ..., t‚Çô) with R relational symbol of L and t‚ÇÅ,...,t‚Çô ground terms in L^{omega}_*
| eq : Term ‚Üí Term ‚Üí Formula                                        -- t =œÉ q
| mem : Term ‚Üí Term ‚Üí Formula                                       -- t ‚ààœÉ q
| not : Formula ‚Üí Formula                                           -- If A is a formula, then so is (¬¨A)
| or : Formula ‚Üí Formula ‚Üí Formula                                  -- If A and B are formulas, then so is (A‚à®B)
| unbForall : string ‚Üí Formula ‚Üí Formula                            -- If A is a base formula, then so is (‚àÄx A)
| bForall : string ‚Üí Term ‚Üí Formula ‚Üí Formula                       -- If A is a formula, then so is (‚àÄx‚ààt A)


open Formula

-- NOTATION: Notation for the equality and the membership symbols
notation t‚ÇÅ "=‚ÇÅ" t‚ÇÇ => Formula.eq t‚ÇÅ t‚ÇÇ
notation t‚ÇÅ "‚àà‚ÇÅ" t‚ÇÇ => Formula.mem t‚ÇÅ t‚ÇÇ

-- NOTATION: Notation for the primitive symbols ¬¨, ‚à®, ‚àÄx and ‚àÄx‚ààt in L^{omega}_*
notation "¬¨‚ÇÅ" A => not A
notation A "‚à®‚ÇÅ" B => or A B
notation "V‚ÇÅ" => unbForall
notation "bV‚ÇÅ" => bForall
-- notation "b‚àÄ‚ÇÅ" x t A => bForall x t A

-- DEFINITION 1.8 (p.14): The bounded existential quantifier ‚àÉx‚ààt (defined symbol)

-- The unbounded existential quantifier ‚àÉx A
def E‚ÇÅ (x : string) (A : Formula) : Formula :=
  ¬¨‚ÇÅ(unbForall x (¬¨‚ÇÅ A))

-- The bounded existential quantifier ‚àÉx A
def bE‚ÇÅ (x : string) (t : Term) (A : Formula) : Formula :=
  ¬¨‚ÇÅ(bForall x t (¬¨‚ÇÅ A))

-- Testing the notation
-- def Notation_test (x : string) (t : Term) (A : Formula) : Formula := bV‚ÇÅ x t A
-- #check Notation_test

-- --------------------
-- DEFINED SYMBOLS (p.8 and p.14):
-- Usual logical abbreviations for the defined symbols ‚àß, ‚Üí, ‚Üî, ‚àÉx and ‚àÉx‚ààt in L^{omega}_*
-- --------------------

-- Conjunction:  A ‚àß B := ¬¨(¬¨A‚à®¬¨B)
@[simp]
def F_and (A B : Formula) : Formula :=
  ¬¨‚ÇÅ ((¬¨‚ÇÅ A) ‚à®‚ÇÅ (¬¨‚ÇÅ B))

notation A "‚àß‚ÇÅ" B => F_and A B

-- Implication:  A ‚Üí B := ¬¨ A ‚à® B
@[simp]
def F_implies (A B : Formula) : Formula :=
  (¬¨‚ÇÅ A) ‚à®‚ÇÅ B

notation A "‚Üí‚ÇÅ" B => F_implies A B

-- Equivalence:  A ‚Üî B := (A ‚Üí B) ‚àß (B ‚Üí A)
@[simp]
def F_iff (A B : Formula) : Formula :=
  ¬¨‚ÇÅ ((¬¨‚ÇÅ((¬¨‚ÇÅA) ‚à®‚ÇÅ B)) ‚à®‚ÇÅ (¬¨‚ÇÅ((¬¨‚ÇÅB) ‚à®‚ÇÅ A)))
  -- (A ‚Üí‚ÇÅ B) ‚àß‚ÇÅ (B ‚Üí‚ÇÅ A)
  -- (¬¨‚ÇÅ A ‚à®‚ÇÅ B) ‚àß‚ÇÅ (¬¨‚ÇÅ B ‚à®‚ÇÅ A)

notation A "‚Üî‚ÇÅ" B => F_iff A B

-- ------------------------------------------------------
-- CHECKING FORMULAS:
-- ------------------------------------------------------

-- Checks whether a given formula is atomic:
inductive isAtomic : Formula ‚Üí Prop
| at_rel : isAtomic (rel x l_term)
| at_eq : isAtomic (eq t‚ÇÅ t‚ÇÇ)
| at_mem : isAtomic (mem t‚ÇÅ t‚ÇÇ)

-- Checks whether a given formula is base:
inductive isBase : Formula ‚Üí Prop
| b_atom : isAtomic A ‚Üí isBase A                                                -- Atomic formulas are base formulas
| b_not (h: isBase A) : isBase (not A)                                          -- If A is base, then so is ¬¨‚ÇÅA
| b_or (h1: isBase A) (h2 : isBase B) : isBase (or A B)                         -- If A and B are base, then so is A‚à®‚ÇÅB
| b_bForall (x : string) (t : Term) (h : isBase A) : isBase (bForall x t A)     -- If A is base, then so is ‚àÄx‚ààt A

open isBase

-- Example: Let A be an atomic formula (assumption h), then it is base.
example (A : Formula) (h : isAtomic A)  : (isBase A) := by
  exact b_atom h

example (A B : Formula) (hA_at : isAtomic A) (hB_b : isBase B) : (isBase (A‚à®‚ÇÅB)) := by
  have h := b_atom hA_at
  exact b_or h hB_b

-- ------------------------------------------------------
-- LEMMAS: Defined symbols of base formulas are also base
-- ------------------------------------------------------

-- Lemma Conj_base states that if A and B are base formulas, then so is their conjunction A ‚àß B
lemma Conj_base (A B : Formula) (hA : isBase A) (hB : isBase B) : (isBase (A‚àß‚ÇÅB)) := by
  unfold F_and
  have h_nA := b_not hA
  have h_nB := b_not hB
  have h_or_nAnB := b_or h_nA h_nB
  exact b_not h_or_nAnB

-- Lemma Imp_base states that if A and B are base formulas, then so is their implication A ‚Üí B
lemma Imp_base (A B : Formula) (hA : isBase A) (hB : isBase B) : (isBase (A‚Üí‚ÇÅB)) := by
  unfold F_implies
  have h_nA := b_not hA
  exact b_or h_nA hB

-- Lemma Iff_base states that if A and B are base formulas, then so is their equivalence A ‚Üî B
lemma Iff_base (A B : Formula) (hA : isBase A) (hB : isBase B) : (isBase (A‚Üî‚ÇÅB)) := by
  unfold F_iff
  have h_nA := b_not hA
  have h_nB := b_not hB
  have h_or_nAB := b_or h_nA hB
  have h_or_nBA := b_or h_nB hA
  have h_n_or_nAB := b_not h_or_nAB
  have h_n_or_nBA := b_not h_or_nBA
  have H := b_or h_n_or_nAB h_n_or_nBA
  exact b_not H

-- Lemma unbForall_base states that if A is a base formula, then so is ‚àÄx‚ààt A
lemma unbForall_base (A : Formula) (x : string) (t : Term) (hA : isBase A) : (isBase (bE‚ÇÅ x t A)) := by
  unfold bE‚ÇÅ
  have h_nA := b_not hA
  have h_unbForall_nA := b_bForall x t h_nA
  exact b_not h_unbForall_nA

-- ------------------------------------------------------
-- TYPECHECKING
-- We typecheck the components of the formulas of L^œâ_*.
-- This guarantees that the formulas have admissible types.
-- ------------------------------------------------------

inductive Formula_TypeChecking : Formula ‚Üí Prop
| tcRel {R l_terms} :                                               -- R √© relational symbol DE L (falta); l_terms √© uma lista de termos
    (‚àÄ t, t ‚àà l_terms ‚Üí Term_TypeChecking t G) ‚Üí
    Formula_TypeChecking (Formula.rel R l_terms)
| tcEq {œÉ t‚ÇÅ t‚ÇÇ} :
    Term_TypeChecking t‚ÇÅ œÉ ‚Üí
    Term_TypeChecking t‚ÇÇ œÉ ‚Üí
    Formula_TypeChecking (Formula.eq t‚ÇÅ t‚ÇÇ)
| tcMem {œÉ t‚ÇÅ t‚ÇÇ} :
    Term_TypeChecking t‚ÇÅ œÉ ‚Üí
    Term_TypeChecking t‚ÇÇ (œÉ‚ãÜ) ‚Üí
    Formula_TypeChecking (Formula.mem t‚ÇÅ t‚ÇÇ)
| tcNot {A} :
    Formula_TypeChecking A ‚Üí Formula_TypeChecking (Formula.not A)
| tcOr {A B} :
    Formula_TypeChecking A ‚Üí
    Formula_TypeChecking B ‚Üí
    Formula_TypeChecking (Formula.or A B)
| tcbForall {x œÉ t A} :
    Term_TypeChecking (Term.var x) œÉ ‚Üí
    Term_TypeChecking t (œÉ‚ãÜ) ‚Üí
    Formula_TypeChecking A ‚Üí
    Formula_TypeChecking (Formula.bForall x t A)
| tcunbForall {x œÉ A} :
    Term_TypeChecking (Term.var x) œÉ ‚Üí
    Formula_TypeChecking A ‚Üí
    Formula_TypeChecking (Formula.unbForall x A)


-- --------------------------------------
-- AXIOMS
-- --------------------------------------

--def normal_form (A B : Formula) (x: string) : Formula ‚Üí Formula
--| or A B => A
--| bForall x A => A
--| t => t

-- Drei strecher ass gleich, wees net wei dat heescht
inductive Equivalent : Formula ‚Üí Formula ‚Üí Prop
| id : Equivalent A A
| comm : Equivalent A B ‚Üí Equivalent B A
--| nf_left : Equivalent A B ‚Üí Equivalent (normal_form A) B
--| nf_right : Equivalent A B ‚Üí Equivalent A (normal_form B)

inductive isTrue : Formula ‚Üí Prop
| lem : isTrue (A ‚à®‚ÇÅ (¬¨‚ÇÅA))
--| substitution : FALTA
| expansion:
      isTrue A ‚Üí
      ---------------
      isTrue (A ‚à®‚ÇÅ B)
| contraction :
      isTrue (A ‚à®‚ÇÅ A) ‚Üí
      ---------------
      isTrue A
| associativity :
      isTrue (A ‚à®‚ÇÅ (B ‚à®‚ÇÅ C)) ‚Üí
      ---------------
      isTrue ((A ‚à®‚ÇÅ B) ‚à®‚ÇÅ C)
| cut :
      isTrue (A ‚à®‚ÇÅ B) ‚Üí
      isTrue ((¬¨‚ÇÅA)‚à®‚ÇÅC) ‚Üí
      ---------------
      isTrue (B ‚à®‚ÇÅ C)
--| forall_introduction : FALTA
| equivalence :
      (Equivalent A B) ‚Üí
      isTrue A ‚Üí
      isTrue B
| AxE‚ÇÅ (x : String) :
    isTrue ((var x) =‚ÇÅ (var x))
--| AxE‚ÇÇ (x y : String) : isTrue ((((var x) =‚ÇÅ (var y))‚àß‚ÇÅ A) ‚Üí‚ÇÅ A)        FALTA: falta A(x) e A(y)
| AxU (x : String) (t : Term) (A : Formula) :
    isTrue ((bV‚ÇÅ x t A) ‚Üî‚ÇÅ (V‚ÇÅ x (((var x) ‚àà‚ÇÅ t) ‚Üí‚ÇÅ A)))
| AxC‚ÇÅ (t‚ÇÅ t‚ÇÇ : Term) :
    isTrue (((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) =‚ÇÅ t‚ÇÅ)
| AxC‚ÇÇ (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) :
    isTrue ((((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) =‚ÇÅ ((t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ)))
| AxP‚ÇÅ (t‚ÇÅ t‚ÇÇ : Term) :
    isTrue (((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ) =‚ÇÅ (t‚ÇÇ¬∑t‚ÇÅ))
| AxP‚ÇÇ (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) :
    isTrue (((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ) =‚ÇÅ ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ)))
| AxS‚ÇÅ (t‚ÇÅ t‚ÇÇ : Term) :
    isTrue ((t‚ÇÅ ‚àà‚ÇÅ (ùî∞‚ÇÅ¬∑t‚ÇÇ)) ‚Üî‚ÇÅ (t‚ÇÅ =‚ÇÅ t‚ÇÇ))
| AxS‚ÇÇ (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term) : isTrue ((t‚ÇÅ ‚àà‚ÇÅ ((‚à™‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ) ) ‚Üî‚ÇÅ ((t‚ÇÅ ‚àà‚ÇÅ t‚ÇÇ) ‚à®‚ÇÅ (t‚ÇÅ ‚àà‚ÇÅ t‚ÇÉ)))
| AxS‚ÇÉ (a f b : Term) : isTrue ((b ‚àà‚ÇÅ ((ind_‚ãÉ‚ÇÅ¬∑a)¬∑f)) ‚Üî‚ÇÅ (bE‚ÇÅ x a (b ‚àà‚ÇÅ (f¬∑x))))

-- FALTA: falta o bAC^œâ_*

-- TESTE: o lemma eq_symmetry est√° a dar erro, mas o teste com #check mostra que a sintaxe est√° good
def f : Term := var "f"
def g : Term := var "g"

#check (f =‚ÇÅ g) ‚Üí‚ÇÅ (g =‚ÇÅ f)

--lemma eq_symmetry : (f =‚ÇÅ g) ‚Üí‚ÇÅ (g =‚ÇÅ f) := sorry

--theorem tastino (x y : String) : Formula

--lemma eq_symmetry (x y : String) : (((var x) =‚ÇÅ (var y)) ‚Üí‚ÇÅ ((var y) =‚ÇÅ (var x))) := sorry

--lemma eq_transitivity (x y z : String) : ((((var x) =‚ÇÅ (var y)) ‚àß‚ÇÅ ((var y) =‚ÇÅ (var z))) ‚Üí‚ÇÅ ((var x) =‚ÇÅ (var z))) := sorry

-- --------------------------------------
-- COVERSIONS
-- --------------------------------------

-- Checks whether a term converts to another one
inductive ConvertsTo : Term ‚Üí Term ‚Üí Prop
| c1_pi {t‚ÇÅ t‚ÇÇ}: ConvertsTo ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) t‚ÇÅ
| c2_sigma {t‚ÇÅ t‚ÇÇ t‚ÇÉ}: ConvertsTo (((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ) ((t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ))
| c3_indU {t‚ÇÅ t‚ÇÇ} : ConvertsTo ((ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ) (t‚ÇÇ¬∑t‚ÇÅ)
| c4_indU_binU {t‚ÇÅ t‚ÇÇ t‚ÇÉ}: ConvertsTo ((ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ) ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ))

def conv : Term ‚Üí Term
| ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) => t‚ÇÅ
| ((Œ£‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ)¬∑t‚ÇÉ => (t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ)
| (ind_‚ãÉ‚ÇÅ¬∑(ùî∞‚ÇÅ¬∑t‚ÇÅ))¬∑t‚ÇÇ => t‚ÇÇ¬∑t‚ÇÅ
| (ind_‚ãÉ‚ÇÅ¬∑((‚à™‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ))¬∑t‚ÇÉ => (‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ)
| t => t

def examplinho (q t : Term) := ((Œ†‚ÇÅ¬∑q)¬∑t)
--#eval examplinho                                FALTA: falta o REPR que est√° a dar erro

--notation t‚ÇÅ "‚ñπ" t‚ÇÇ => conv t‚ÇÅ t‚ÇÇ

-- FALTA: conversions preserve types

-- EXAMPLE 1.10 (p.28)


end StarLang
