import LeanProjeto2.StarLang_old

open StarLang
open FType

#check ground

-- EXAMPLE 1.2
def ex1Type1 : FType := star ground                                                         -- 1.2.1 G*
def ex1Type2 : FType := ground ‚ü∂ ground                                                 -- G ‚Üí G
def ex1Type31 : FType := arrow ground (arrow ground ground)                                 -- G ‚Üí (G ‚Üí G)
def ex1Type32 : FType := arrow (arrow ground ground) ground                                 -- (G ‚Üí G) ‚Üí G
def ex1Type4 : FType := arrow (arrow ground ground) (arrow ground (arrow ground ground))    -- (G ‚Üí G) ‚Üí (G ‚Üí (G ‚Üí G))
def ex1Type51 (œÉ œÑ : FType) : FType := arrow œÉ (arrow (arrow (star œÉ) œÑ) œÑ)                 -- œÉ ‚Üí ((œÉ* ‚Üí œÑ) ‚Üí œÑ)
def ex1Type52 (œÉ œÑ : FType) : FType := star (arrow (star œÉ) œÑ)                              -- 1.2.5 (œÉ* ‚Üí œÑ)*
example (œÉ œÑ : FType) : FType := star (arrow (star œÉ) œÑ)

#check ex1Type32 -- ???????????
#check ex1Type51

-- --------------------------------------------------------------------------

-- PRIMEIRA DEFINI√áAO DE CONSTANTES (not good enough, use inductive)

-- Combinador Pi -- Œ† : œÉ ‚Üí (œÑ ‚Üí œÉ) -- [def 1.2 b) i.]
def Pi (œÉ œÑ : FType) : FType :=
  arrow œÉ (arrow œÑ œÉ)

-- Combinador Sigma -- Œ£ : (œÉ ‚Üí (œÑ ‚Üí œÅ)) ‚Üí ((œÉ ‚Üí œÑ) ‚Üí (œÉ ‚Üí œÅ)) -- [def 1.2 b) ii.]
def Sigma_ (œÉ œÑ œÅ : FType) : FType :=
  arrow (arrow œÉ (arrow œÑ œÅ)) (arrow (arrow œÉ œÑ) (arrow œÉ œÅ))

-- Singleton -- s_œÉ : œÉ ‚Üí œÉ* -- [def 1.2 c) i.]
def singg (œÉ : FType) : FType :=
  arrow œÉ (star œÉ)

-- Union (binary) -- ‚à™_œÉ : œÉ* ‚Üí (œÉ* ‚Üí œÉ*) -- [def 1.2 c) ii.]
def bUnion (œÉ : FType) : FType :=
  arrow (star œÉ) (arrow (star œÉ) (star œÉ))

-- Indexed union -- œÉ* ‚Üí ((œÉ ‚Üí œÑ*) ‚Üí œÑ*) -- [def 1.2 c) iii.]
def iUnion (œÉ œÑ : FType) : FType :=
  arrow (star œÉ) (arrow (arrow œÉ (star œÑ)) (star œÑ))

-- --------------------------------------------------------------------------

-- SIMBOLOS

inductive Symb
| and
| not
| unbForall
| tEq
| memb
| bForall


inductive P : Prop
| x
| y

--lemma a (x:P) : P := by
--  constructor


-- AXIOMS SEM NOTA√áAO

open Term
open AtomicFormula

def AxC‚ÇÅ (œÉ : FType) (p q : Term) : AtomicFormula       -- FALTA TYPECHECKING
  := eq œÉ (app (app Œ†‚ÇÅ p) q) q
--:= eq œÉ ((Œ†‚ÇÅ¬∑p)¬∑q) q

def AxC‚ÇÇ (œÑ : FType) (p q t : Term) : AtomicFormula     -- FALTA TYPECHECKING
  := eq œÑ (app (app (app Œ£‚ÇÅ p) q) t) (app (app p t) (app q t))
--:= eq œÑ (((Œ£‚ÇÅ¬∑p)¬∑q)¬∑t) ((p¬∑t)¬∑(q¬∑t))

def AxP‚ÇÅ (œÑ : FType) (x y : Term) : AtomicFormula
  := eq (œÑ‚ãÜ) (app (app ind_‚ãÉ‚ÇÅ (app ùî∞‚ÇÅ x)) y) (app x y)
--:= eq (œÑ‚ãÜ) ((ind_‚ãÉ‚ÇÅ ¬∑ (ùî∞‚ÇÅ¬∑x)) ¬∑ y) (x¬∑y)

def AxP‚ÇÇ (œÑ : FType) (x y z : Term) : AtomicFormula
  := eq (œÑ‚ãÜ) (app (app ind_‚ãÉ‚ÇÅ (app (app ‚à™‚ÇÅ x) y) ) z) (app (app ‚à™‚ÇÅ (app (app ind_‚ãÉ‚ÇÅ x) z)) (app (app ind_‚ãÉ‚ÇÅ y) z))
--:= eq (œÑ‚ãÜ) ((ind_‚ãÉ‚ÇÅ ¬∑ ((‚à™‚ÇÅ¬∑x)¬∑y))¬∑z) ((‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ ¬∑ x)¬∑z))¬∑((ind_‚ãÉ‚ÇÅ ¬∑ y)¬∑z))



/-
inductive Conversions
| C1 (t‚ÇÅ t‚ÇÇ : Term)
| C2 (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term)
| C3 (t‚ÇÅ t‚ÇÇ : Term)
| C4 (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term)

--def conversin : Expr ‚Üí Int
--| C1 t‚ÇÅ t‚ÇÇ      => t‚ÇÅ
--| C2 t‚ÇÅ t‚ÇÇ t‚ÇÉ   => (t‚ÇÅ¬∑t‚ÇÉ)¬∑(t‚ÇÇ¬∑t‚ÇÉ)
--| C3 t‚ÇÅ t‚ÇÇ      => t‚ÇÇ¬∑t‚ÇÅ
--| C4 t‚ÇÅ t‚ÇÇ t‚ÇÉ   => (‚à™‚ÇÅ¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÉ))¬∑((ind_‚ãÉ‚ÇÅ¬∑t‚ÇÇ)¬∑t‚ÇÉ)

-- def C1 (t‚ÇÅ t‚ÇÇ : Term) : Term := ((Œ†‚ÇÅ¬∑t‚ÇÅ)¬∑t‚ÇÇ) => t‚ÇÅ
-/
